{"dependencies":[{"name":"../BitLength.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":44,"index":44}}],"key":"fguGW92Qr8DLw4rtzkMY5RfpAnY=","exportNames":["*"],"imports":1}},{"name":"./BooleanEncoder.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":45},"end":{"line":2,"column":53,"index":98}}],"key":"jvND8JXlxjrnvXLvIdr+wATPG2w=","exportNames":["*"],"imports":1}},{"name":"../../errors/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":99},"end":{"line":3,"column":54,"index":153}}],"key":"qHglNs3UH2C2wT8WJZubASIXHQ0=","exportNames":["*"],"imports":1}},{"name":"./IntEncoder.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":154},"end":{"line":4,"column":45,"index":199}}],"key":"yU5HftgQ+HW+Cj5EoqioxXCPi1U=","exportNames":["*"],"imports":1}},{"name":"../../model/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":200},"end":{"line":5,"column":84,"index":284}}],"key":"ecknVzcUu1YLgoWzPEOnNKr2bTY=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"PurposeRestrictionVectorEncoder\", {\n    enumerable: true,\n    get: function () {\n      return PurposeRestrictionVectorEncoder;\n    }\n  });\n  var _BitLengthJs = require(_dependencyMap[0], \"../BitLength.js\");\n  var _BooleanEncoderJs = require(_dependencyMap[1], \"./BooleanEncoder.js\");\n  var _errorsIndexJs = require(_dependencyMap[2], \"../../errors/index.js\");\n  var _IntEncoderJs = require(_dependencyMap[3], \"./IntEncoder.js\");\n  var _modelIndexJs = require(_dependencyMap[4], \"../../model/index.js\");\n  class PurposeRestrictionVectorEncoder {\n    static encode(prVector) {\n      // start with the number of restrictions\n      let bitString = _IntEncoderJs.IntEncoder.encode(prVector.numRestrictions, _BitLengthJs.BitLength.numRestrictions);\n      // if the vector is empty we'll just return a string with just the numRestricitons being 0\n      if (!prVector.isEmpty()) {\n        // create each restriction group\n        prVector.getRestrictions().forEach(purpRestriction => {\n          // every restriction group has the purposeId and the restrictionType;\n          bitString += _IntEncoderJs.IntEncoder.encode(purpRestriction.purposeId, _BitLengthJs.BitLength.purposeId);\n          bitString += _IntEncoderJs.IntEncoder.encode(purpRestriction.restrictionType, _BitLengthJs.BitLength.restrictionType);\n          // now get all the vendors under that restriction\n          const vendors = prVector.getVendors(purpRestriction);\n          const len = vendors.length;\n          /**\n           * numEntries comes first so we will have to keep a counter and the do\n           * the encoding at the end\n           */\n          let numEntries = 0;\n          let startId = 0;\n          let rangeField = '';\n          for (let i = 0; i < len; i++) {\n            const vendorId = vendors[i];\n            if (startId === 0) {\n              numEntries++;\n              startId = vendorId;\n            }\n            // we know that `len` is greater than zero because we entered the loop\n            const lastVendorId = vendors[len - 1];\n            const gvlVendorIds = prVector.gvl.vendorIds;\n            const nextGvlVendor = vendorId => {\n              while (++vendorId <= lastVendorId && !gvlVendorIds.has(vendorId)) {}\n              return vendorId;\n            };\n            /**\n             * either end of the loop or there are GVL vendor IDs before the next one\n             */\n            if (i === len - 1 || vendors[i + 1] > nextGvlVendor(vendorId)) {\n              /**\n               * it's a range entry if we've got something other than the start\n               * ID\n               */\n              const isRange = !(vendorId === startId);\n              // 0 means single 1 means range\n              rangeField += _BooleanEncoderJs.BooleanEncoder.encode(isRange);\n              rangeField += _IntEncoderJs.IntEncoder.encode(startId, _BitLengthJs.BitLength.vendorId);\n              if (isRange) {\n                rangeField += _IntEncoderJs.IntEncoder.encode(vendorId, _BitLengthJs.BitLength.vendorId);\n              }\n              // reset the startId so we grab the next id in the list\n              startId = 0;\n            }\n          }\n          /**\n           * now that  the range encoding is built, encode the number of ranges\n           * and then append the range field to the bitString.\n           */\n          bitString += _IntEncoderJs.IntEncoder.encode(numEntries, _BitLengthJs.BitLength.numEntries);\n          bitString += rangeField;\n        });\n      }\n      return bitString;\n    }\n    static decode(encodedString) {\n      let index = 0;\n      const vector = new _modelIndexJs.PurposeRestrictionVector();\n      const numRestrictions = _IntEncoderJs.IntEncoder.decode(encodedString.substr(index, _BitLengthJs.BitLength.numRestrictions), _BitLengthJs.BitLength.numRestrictions);\n      index += _BitLengthJs.BitLength.numRestrictions;\n      for (let i = 0; i < numRestrictions; i++) {\n        // First is purpose ID\n        const purposeId = _IntEncoderJs.IntEncoder.decode(encodedString.substr(index, _BitLengthJs.BitLength.purposeId), _BitLengthJs.BitLength.purposeId);\n        index += _BitLengthJs.BitLength.purposeId;\n        // Second Restriction Type\n        const restrictionType = _IntEncoderJs.IntEncoder.decode(encodedString.substr(index, _BitLengthJs.BitLength.restrictionType), _BitLengthJs.BitLength.restrictionType);\n        index += _BitLengthJs.BitLength.restrictionType;\n        const purposeRestriction = new _modelIndexJs.PurposeRestriction(purposeId, restrictionType);\n        // Num Entries (number of vendors)\n        const numEntries = _IntEncoderJs.IntEncoder.decode(encodedString.substr(index, _BitLengthJs.BitLength.numEntries), _BitLengthJs.BitLength.numEntries);\n        index += _BitLengthJs.BitLength.numEntries;\n        for (let j = 0; j < numEntries; j++) {\n          const isARange = _BooleanEncoderJs.BooleanEncoder.decode(encodedString.substr(index, _BitLengthJs.BitLength.anyBoolean));\n          index += _BitLengthJs.BitLength.anyBoolean;\n          const startOrOnlyVendorId = _IntEncoderJs.IntEncoder.decode(encodedString.substr(index, _BitLengthJs.BitLength.vendorId), _BitLengthJs.BitLength.vendorId);\n          index += _BitLengthJs.BitLength.vendorId;\n          if (isARange) {\n            const endVendorId = _IntEncoderJs.IntEncoder.decode(encodedString.substr(index, _BitLengthJs.BitLength.vendorId), _BitLengthJs.BitLength.vendorId);\n            index += _BitLengthJs.BitLength.vendorId;\n            if (endVendorId < startOrOnlyVendorId) {\n              throw new _errorsIndexJs.DecodingError(`Invalid RangeEntry: endVendorId ${endVendorId} is less than ${startOrOnlyVendorId}`);\n            }\n            for (let k = startOrOnlyVendorId; k <= endVendorId; k++) {\n              vector.add(k, purposeRestriction);\n            }\n          } else {\n            vector.add(startOrOnlyVendorId, purposeRestriction);\n          }\n        }\n      }\n      vector.bitLength = index;\n      return vector;\n    }\n  }\n});","lineCount":120,"map":[[7,2,6,0,"Object"],[7,8,6,0],[7,9,6,0,"defineProperty"],[7,23,6,0],[7,24,6,0,"exports"],[7,31,6,0],[8,4,6,0,"enumerable"],[8,14,6,0],[9,4,6,0,"get"],[9,7,6,0],[9,18,6,0,"get"],[9,19,6,0],[10,6,6,0],[10,13,6,0,"PurposeRestrictionVectorEncoder"],[10,44,6,0],[11,4,6,0],[12,2,6,0],[13,2,1,0],[13,6,1,0,"_BitLengthJs"],[13,18,1,0],[13,21,1,0,"require"],[13,28,1,0],[13,29,1,0,"_dependencyMap"],[13,43,1,0],[14,2,2,0],[14,6,2,0,"_BooleanEncoderJs"],[14,23,2,0],[14,26,2,0,"require"],[14,33,2,0],[14,34,2,0,"_dependencyMap"],[14,48,2,0],[15,2,3,0],[15,6,3,0,"_errorsIndexJs"],[15,20,3,0],[15,23,3,0,"require"],[15,30,3,0],[15,31,3,0,"_dependencyMap"],[15,45,3,0],[16,2,4,0],[16,6,4,0,"_IntEncoderJs"],[16,19,4,0],[16,22,4,0,"require"],[16,29,4,0],[16,30,4,0,"_dependencyMap"],[16,44,4,0],[17,2,5,0],[17,6,5,0,"_modelIndexJs"],[17,19,5,0],[17,22,5,0,"require"],[17,29,5,0],[17,30,5,0,"_dependencyMap"],[17,44,5,0],[18,2,6,7],[18,8,6,13,"PurposeRestrictionVectorEncoder"],[18,39,6,44],[18,40,6,45],[19,4,7,4],[19,11,7,11,"encode"],[19,17,7,17,"encode"],[19,18,7,18,"prVector"],[19,26,7,26],[19,28,7,28],[20,6,8,8],[21,6,9,8],[21,10,9,12,"bitString"],[21,19,9,21],[21,22,9,24,"IntEncoder"],[21,35,9,34],[21,36,9,34,"IntEncoder"],[21,46,9,34],[21,47,9,35,"encode"],[21,53,9,41],[21,54,9,42,"prVector"],[21,62,9,50],[21,63,9,51,"numRestrictions"],[21,78,9,66],[21,80,9,68,"BitLength"],[21,92,9,77],[21,93,9,77,"BitLength"],[21,102,9,77],[21,103,9,78,"numRestrictions"],[21,118,9,93],[21,119,9,94],[22,6,10,8],[23,6,11,8],[23,10,11,12],[23,11,11,13,"prVector"],[23,19,11,21],[23,20,11,22,"isEmpty"],[23,27,11,29],[23,28,11,30],[23,29,11,31],[23,31,11,33],[24,8,12,12],[25,8,13,12,"prVector"],[25,16,13,20],[25,17,13,21,"getRestrictions"],[25,32,13,36],[25,33,13,37],[25,34,13,38],[25,35,13,39,"forEach"],[25,42,13,46],[25,43,13,48,"purpRestriction"],[25,58,13,63],[25,62,13,68],[26,10,14,16],[27,10,15,16,"bitString"],[27,19,15,25],[27,23,15,29,"IntEncoder"],[27,36,15,39],[27,37,15,39,"IntEncoder"],[27,47,15,39],[27,48,15,40,"encode"],[27,54,15,46],[27,55,15,47,"purpRestriction"],[27,70,15,62],[27,71,15,63,"purposeId"],[27,80,15,72],[27,82,15,74,"BitLength"],[27,94,15,83],[27,95,15,83,"BitLength"],[27,104,15,83],[27,105,15,84,"purposeId"],[27,114,15,93],[27,115,15,94],[28,10,16,16,"bitString"],[28,19,16,25],[28,23,16,29,"IntEncoder"],[28,36,16,39],[28,37,16,39,"IntEncoder"],[28,47,16,39],[28,48,16,40,"encode"],[28,54,16,46],[28,55,16,47,"purpRestriction"],[28,70,16,62],[28,71,16,63,"restrictionType"],[28,86,16,78],[28,88,16,80,"BitLength"],[28,100,16,89],[28,101,16,89,"BitLength"],[28,110,16,89],[28,111,16,90,"restrictionType"],[28,126,16,105],[28,127,16,106],[29,10,17,16],[30,10,18,16],[30,16,18,22,"vendors"],[30,23,18,29],[30,26,18,32,"prVector"],[30,34,18,40],[30,35,18,41,"getVendors"],[30,45,18,51],[30,46,18,52,"purpRestriction"],[30,61,18,67],[30,62,18,68],[31,10,19,16],[31,16,19,22,"len"],[31,19,19,25],[31,22,19,28,"vendors"],[31,29,19,35],[31,30,19,36,"length"],[31,36,19,42],[32,10,20,16],[33,0,21,0],[34,0,22,0],[35,0,23,0],[36,10,24,16],[36,14,24,20,"numEntries"],[36,24,24,30],[36,27,24,33],[36,28,24,34],[37,10,25,16],[37,14,25,20,"startId"],[37,21,25,27],[37,24,25,30],[37,25,25,31],[38,10,26,16],[38,14,26,20,"rangeField"],[38,24,26,30],[38,27,26,33],[38,29,26,35],[39,10,27,16],[39,15,27,21],[39,19,27,25,"i"],[39,20,27,26],[39,23,27,29],[39,24,27,30],[39,26,27,32,"i"],[39,27,27,33],[39,30,27,36,"len"],[39,33,27,39],[39,35,27,41,"i"],[39,36,27,42],[39,38,27,44],[39,40,27,46],[40,12,28,20],[40,18,28,26,"vendorId"],[40,26,28,34],[40,29,28,37,"vendors"],[40,36,28,44],[40,37,28,45,"i"],[40,38,28,46],[40,39,28,47],[41,12,29,20],[41,16,29,24,"startId"],[41,23,29,31],[41,28,29,36],[41,29,29,37],[41,31,29,39],[42,14,30,24,"numEntries"],[42,24,30,34],[42,26,30,36],[43,14,31,24,"startId"],[43,21,31,31],[43,24,31,34,"vendorId"],[43,32,31,42],[44,12,32,20],[45,12,33,20],[46,12,34,20],[46,18,34,26,"lastVendorId"],[46,30,34,38],[46,33,34,41,"vendors"],[46,40,34,48],[46,41,34,49,"len"],[46,44,34,52],[46,47,34,55],[46,48,34,56],[46,49,34,57],[47,12,35,20],[47,18,35,26,"gvlVendorIds"],[47,30,35,38],[47,33,35,41,"prVector"],[47,41,35,49],[47,42,35,50,"gvl"],[47,45,35,53],[47,46,35,54,"vendorIds"],[47,55,35,63],[48,12,36,20],[48,18,36,26,"nextGvlVendor"],[48,31,36,39],[48,34,36,43,"vendorId"],[48,42,36,51],[48,46,36,56],[49,14,37,24],[49,21,37,31],[49,23,37,33,"vendorId"],[49,31,37,41],[49,35,37,45,"lastVendorId"],[49,47,37,57],[49,51,37,61],[49,52,37,62,"gvlVendorIds"],[49,64,37,74],[49,65,37,75,"has"],[49,68,37,78],[49,69,37,79,"vendorId"],[49,77,37,87],[49,78,37,88],[49,80,37,90],[49,81,38,24],[50,14,39,24],[50,21,39,31,"vendorId"],[50,29,39,39],[51,12,40,20],[51,13,40,21],[52,12,41,20],[53,0,42,0],[54,0,43,0],[55,12,44,20],[55,16,44,24,"i"],[55,17,44,25],[55,22,44,30,"len"],[55,25,44,33],[55,28,44,36],[55,29,44,37],[55,33,44,41,"vendors"],[55,40,44,48],[55,41,44,49,"i"],[55,42,44,50],[55,45,44,53],[55,46,44,54],[55,47,44,55],[55,50,44,58,"nextGvlVendor"],[55,63,44,71],[55,64,44,72,"vendorId"],[55,72,44,80],[55,73,44,81],[55,75,44,83],[56,14,45,24],[57,0,46,0],[58,0,47,0],[59,0,48,0],[60,14,49,24],[60,20,49,30,"isRange"],[60,27,49,37],[60,30,49,40],[60,32,49,42,"vendorId"],[60,40,49,50],[60,45,49,55,"startId"],[60,52,49,62],[60,53,49,63],[61,14,50,24],[62,14,51,24,"rangeField"],[62,24,51,34],[62,28,51,38,"BooleanEncoder"],[62,45,51,52],[62,46,51,52,"BooleanEncoder"],[62,60,51,52],[62,61,51,53,"encode"],[62,67,51,59],[62,68,51,60,"isRange"],[62,75,51,67],[62,76,51,68],[63,14,52,24,"rangeField"],[63,24,52,34],[63,28,52,38,"IntEncoder"],[63,41,52,48],[63,42,52,48,"IntEncoder"],[63,52,52,48],[63,53,52,49,"encode"],[63,59,52,55],[63,60,52,56,"startId"],[63,67,52,63],[63,69,52,65,"BitLength"],[63,81,52,74],[63,82,52,74,"BitLength"],[63,91,52,74],[63,92,52,75,"vendorId"],[63,100,52,83],[63,101,52,84],[64,14,53,24],[64,18,53,28,"isRange"],[64,25,53,35],[64,27,53,37],[65,16,54,28,"rangeField"],[65,26,54,38],[65,30,54,42,"IntEncoder"],[65,43,54,52],[65,44,54,52,"IntEncoder"],[65,54,54,52],[65,55,54,53,"encode"],[65,61,54,59],[65,62,54,60,"vendorId"],[65,70,54,68],[65,72,54,70,"BitLength"],[65,84,54,79],[65,85,54,79,"BitLength"],[65,94,54,79],[65,95,54,80,"vendorId"],[65,103,54,88],[65,104,54,89],[66,14,55,24],[67,14,56,24],[68,14,57,24,"startId"],[68,21,57,31],[68,24,57,34],[68,25,57,35],[69,12,58,20],[70,10,59,16],[71,10,60,16],[72,0,61,0],[73,0,62,0],[74,0,63,0],[75,10,64,16,"bitString"],[75,19,64,25],[75,23,64,29,"IntEncoder"],[75,36,64,39],[75,37,64,39,"IntEncoder"],[75,47,64,39],[75,48,64,40,"encode"],[75,54,64,46],[75,55,64,47,"numEntries"],[75,65,64,57],[75,67,64,59,"BitLength"],[75,79,64,68],[75,80,64,68,"BitLength"],[75,89,64,68],[75,90,64,69,"numEntries"],[75,100,64,79],[75,101,64,80],[76,10,65,16,"bitString"],[76,19,65,25],[76,23,65,29,"rangeField"],[76,33,65,39],[77,8,66,12],[77,9,66,13],[77,10,66,14],[78,6,67,8],[79,6,68,8],[79,13,68,15,"bitString"],[79,22,68,24],[80,4,69,4],[81,4,70,4],[81,11,70,11,"decode"],[81,17,70,17,"decode"],[81,18,70,18,"encodedString"],[81,31,70,31],[81,33,70,33],[82,6,71,8],[82,10,71,12,"index"],[82,15,71,17],[82,18,71,20],[82,19,71,21],[83,6,72,8],[83,12,72,14,"vector"],[83,18,72,20],[83,21,72,23],[83,25,72,27,"PurposeRestrictionVector"],[83,38,72,51],[83,39,72,51,"PurposeRestrictionVector"],[83,63,72,51],[83,64,72,52],[83,65,72,53],[84,6,73,8],[84,12,73,14,"numRestrictions"],[84,27,73,29],[84,30,73,32,"IntEncoder"],[84,43,73,42],[84,44,73,42,"IntEncoder"],[84,54,73,42],[84,55,73,43,"decode"],[84,61,73,49],[84,62,73,50,"encodedString"],[84,75,73,63],[84,76,73,64,"substr"],[84,82,73,70],[84,83,73,71,"index"],[84,88,73,76],[84,90,73,78,"BitLength"],[84,102,73,87],[84,103,73,87,"BitLength"],[84,112,73,87],[84,113,73,88,"numRestrictions"],[84,128,73,103],[84,129,73,104],[84,131,73,106,"BitLength"],[84,143,73,115],[84,144,73,115,"BitLength"],[84,153,73,115],[84,154,73,116,"numRestrictions"],[84,169,73,131],[84,170,73,132],[85,6,74,8,"index"],[85,11,74,13],[85,15,74,17,"BitLength"],[85,27,74,26],[85,28,74,26,"BitLength"],[85,37,74,26],[85,38,74,27,"numRestrictions"],[85,53,74,42],[86,6,75,8],[86,11,75,13],[86,15,75,17,"i"],[86,16,75,18],[86,19,75,21],[86,20,75,22],[86,22,75,24,"i"],[86,23,75,25],[86,26,75,28,"numRestrictions"],[86,41,75,43],[86,43,75,45,"i"],[86,44,75,46],[86,46,75,48],[86,48,75,50],[87,8,76,12],[88,8,77,12],[88,14,77,18,"purposeId"],[88,23,77,27],[88,26,77,30,"IntEncoder"],[88,39,77,40],[88,40,77,40,"IntEncoder"],[88,50,77,40],[88,51,77,41,"decode"],[88,57,77,47],[88,58,77,48,"encodedString"],[88,71,77,61],[88,72,77,62,"substr"],[88,78,77,68],[88,79,77,69,"index"],[88,84,77,74],[88,86,77,76,"BitLength"],[88,98,77,85],[88,99,77,85,"BitLength"],[88,108,77,85],[88,109,77,86,"purposeId"],[88,118,77,95],[88,119,77,96],[88,121,77,98,"BitLength"],[88,133,77,107],[88,134,77,107,"BitLength"],[88,143,77,107],[88,144,77,108,"purposeId"],[88,153,77,117],[88,154,77,118],[89,8,78,12,"index"],[89,13,78,17],[89,17,78,21,"BitLength"],[89,29,78,30],[89,30,78,30,"BitLength"],[89,39,78,30],[89,40,78,31,"purposeId"],[89,49,78,40],[90,8,79,12],[91,8,80,12],[91,14,80,18,"restrictionType"],[91,29,80,33],[91,32,80,36,"IntEncoder"],[91,45,80,46],[91,46,80,46,"IntEncoder"],[91,56,80,46],[91,57,80,47,"decode"],[91,63,80,53],[91,64,80,54,"encodedString"],[91,77,80,67],[91,78,80,68,"substr"],[91,84,80,74],[91,85,80,75,"index"],[91,90,80,80],[91,92,80,82,"BitLength"],[91,104,80,91],[91,105,80,91,"BitLength"],[91,114,80,91],[91,115,80,92,"restrictionType"],[91,130,80,107],[91,131,80,108],[91,133,80,110,"BitLength"],[91,145,80,119],[91,146,80,119,"BitLength"],[91,155,80,119],[91,156,80,120,"restrictionType"],[91,171,80,135],[91,172,80,136],[92,8,81,12,"index"],[92,13,81,17],[92,17,81,21,"BitLength"],[92,29,81,30],[92,30,81,30,"BitLength"],[92,39,81,30],[92,40,81,31,"restrictionType"],[92,55,81,46],[93,8,82,12],[93,14,82,18,"purposeRestriction"],[93,32,82,36],[93,35,82,39],[93,39,82,43,"PurposeRestriction"],[93,52,82,61],[93,53,82,61,"PurposeRestriction"],[93,71,82,61],[93,72,82,62,"purposeId"],[93,81,82,71],[93,83,82,73,"restrictionType"],[93,98,82,88],[93,99,82,89],[94,8,83,12],[95,8,84,12],[95,14,84,18,"numEntries"],[95,24,84,28],[95,27,84,31,"IntEncoder"],[95,40,84,41],[95,41,84,41,"IntEncoder"],[95,51,84,41],[95,52,84,42,"decode"],[95,58,84,48],[95,59,84,49,"encodedString"],[95,72,84,62],[95,73,84,63,"substr"],[95,79,84,69],[95,80,84,70,"index"],[95,85,84,75],[95,87,84,77,"BitLength"],[95,99,84,86],[95,100,84,86,"BitLength"],[95,109,84,86],[95,110,84,87,"numEntries"],[95,120,84,97],[95,121,84,98],[95,123,84,100,"BitLength"],[95,135,84,109],[95,136,84,109,"BitLength"],[95,145,84,109],[95,146,84,110,"numEntries"],[95,156,84,120],[95,157,84,121],[96,8,85,12,"index"],[96,13,85,17],[96,17,85,21,"BitLength"],[96,29,85,30],[96,30,85,30,"BitLength"],[96,39,85,30],[96,40,85,31,"numEntries"],[96,50,85,41],[97,8,86,12],[97,13,86,17],[97,17,86,21,"j"],[97,18,86,22],[97,21,86,25],[97,22,86,26],[97,24,86,28,"j"],[97,25,86,29],[97,28,86,32,"numEntries"],[97,38,86,42],[97,40,86,44,"j"],[97,41,86,45],[97,43,86,47],[97,45,86,49],[98,10,87,16],[98,16,87,22,"isARange"],[98,24,87,30],[98,27,87,33,"BooleanEncoder"],[98,44,87,47],[98,45,87,47,"BooleanEncoder"],[98,59,87,47],[98,60,87,48,"decode"],[98,66,87,54],[98,67,87,55,"encodedString"],[98,80,87,68],[98,81,87,69,"substr"],[98,87,87,75],[98,88,87,76,"index"],[98,93,87,81],[98,95,87,83,"BitLength"],[98,107,87,92],[98,108,87,92,"BitLength"],[98,117,87,92],[98,118,87,93,"anyBoolean"],[98,128,87,103],[98,129,87,104],[98,130,87,105],[99,10,88,16,"index"],[99,15,88,21],[99,19,88,25,"BitLength"],[99,31,88,34],[99,32,88,34,"BitLength"],[99,41,88,34],[99,42,88,35,"anyBoolean"],[99,52,88,45],[100,10,89,16],[100,16,89,22,"startOrOnlyVendorId"],[100,35,89,41],[100,38,89,44,"IntEncoder"],[100,51,89,54],[100,52,89,54,"IntEncoder"],[100,62,89,54],[100,63,89,55,"decode"],[100,69,89,61],[100,70,89,62,"encodedString"],[100,83,89,75],[100,84,89,76,"substr"],[100,90,89,82],[100,91,89,83,"index"],[100,96,89,88],[100,98,89,90,"BitLength"],[100,110,89,99],[100,111,89,99,"BitLength"],[100,120,89,99],[100,121,89,100,"vendorId"],[100,129,89,108],[100,130,89,109],[100,132,89,111,"BitLength"],[100,144,89,120],[100,145,89,120,"BitLength"],[100,154,89,120],[100,155,89,121,"vendorId"],[100,163,89,129],[100,164,89,130],[101,10,90,16,"index"],[101,15,90,21],[101,19,90,25,"BitLength"],[101,31,90,34],[101,32,90,34,"BitLength"],[101,41,90,34],[101,42,90,35,"vendorId"],[101,50,90,43],[102,10,91,16],[102,14,91,20,"isARange"],[102,22,91,28],[102,24,91,30],[103,12,92,20],[103,18,92,26,"endVendorId"],[103,29,92,37],[103,32,92,40,"IntEncoder"],[103,45,92,50],[103,46,92,50,"IntEncoder"],[103,56,92,50],[103,57,92,51,"decode"],[103,63,92,57],[103,64,92,58,"encodedString"],[103,77,92,71],[103,78,92,72,"substr"],[103,84,92,78],[103,85,92,79,"index"],[103,90,92,84],[103,92,92,86,"BitLength"],[103,104,92,95],[103,105,92,95,"BitLength"],[103,114,92,95],[103,115,92,96,"vendorId"],[103,123,92,104],[103,124,92,105],[103,126,92,107,"BitLength"],[103,138,92,116],[103,139,92,116,"BitLength"],[103,148,92,116],[103,149,92,117,"vendorId"],[103,157,92,125],[103,158,92,126],[104,12,93,20,"index"],[104,17,93,25],[104,21,93,29,"BitLength"],[104,33,93,38],[104,34,93,38,"BitLength"],[104,43,93,38],[104,44,93,39,"vendorId"],[104,52,93,47],[105,12,94,20],[105,16,94,24,"endVendorId"],[105,27,94,35],[105,30,94,38,"startOrOnlyVendorId"],[105,49,94,57],[105,51,94,59],[106,14,95,24],[106,20,95,30],[106,24,95,34,"DecodingError"],[106,38,95,47],[106,39,95,47,"DecodingError"],[106,52,95,47],[106,53,95,48],[106,88,95,83,"endVendorId"],[106,99,95,94],[106,116,95,111,"startOrOnlyVendorId"],[106,135,95,130],[106,137,95,132],[106,138,95,133],[107,12,96,20],[108,12,97,20],[108,17,97,25],[108,21,97,29,"k"],[108,22,97,30],[108,25,97,33,"startOrOnlyVendorId"],[108,44,97,52],[108,46,97,54,"k"],[108,47,97,55],[108,51,97,59,"endVendorId"],[108,62,97,70],[108,64,97,72,"k"],[108,65,97,73],[108,67,97,75],[108,69,97,77],[109,14,98,24,"vector"],[109,20,98,30],[109,21,98,31,"add"],[109,24,98,34],[109,25,98,35,"k"],[109,26,98,36],[109,28,98,38,"purposeRestriction"],[109,46,98,56],[109,47,98,57],[110,12,99,20],[111,10,100,16],[111,11,100,17],[111,17,101,21],[112,12,102,20,"vector"],[112,18,102,26],[112,19,102,27,"add"],[112,22,102,30],[112,23,102,31,"startOrOnlyVendorId"],[112,42,102,50],[112,44,102,52,"purposeRestriction"],[112,62,102,70],[112,63,102,71],[113,10,103,16],[114,8,104,12],[115,6,105,8],[116,6,106,8,"vector"],[116,12,106,14],[116,13,106,15,"bitLength"],[116,22,106,24],[116,25,106,27,"index"],[116,30,106,32],[117,6,107,8],[117,13,107,15,"vector"],[117,19,107,21],[118,4,108,4],[119,2,109,0],[120,0,109,1],[120,3]],"functionMap":{"names":["<global>","PurposeRestrictionVectorEncoder","encode","prVector.getRestrictions.forEach$argument_0","nextGvlVendor","decode"],"mappings":"AAA;OCK;ICC;+CCM;0CCuB;qBDI;aD0B;KDG;IIC;KJsC;CDC"},"hasCjsExports":false},"type":"js/module"}]}