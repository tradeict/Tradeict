{"dependencies":[{"name":"../Cloneable.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":44,"index":44}}],"key":"FJQ7sPyD2S04pmlIJS/Y7IUPNDY=","exportNames":["*"],"imports":1}},{"name":"../errors/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":45},"end":{"line":2,"column":50,"index":95}}],"key":"rg9G2hGSxUlgvvl94nwST8IJkQ8=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"Vector\", {\n    enumerable: true,\n    get: function () {\n      return Vector;\n    }\n  });\n  var _CloneableJs = require(_dependencyMap[0], \"../Cloneable.js\");\n  var _errorsIndexJs = require(_dependencyMap[1], \"../errors/index.js\");\n  /**\n   * Vector class is like a Set except it keeps track of a max id\n   */\n  class Vector extends _CloneableJs.Cloneable {\n    /**\n     * if this originatd from an encoded string we'll need a place to store the\n     * bit length; it can be set and got from here\n     */\n    bitLength = 0;\n    maxId_ = 0;\n    set_ = new Set();\n    *[Symbol.iterator]() {\n      for (let i = 1; i <= this.maxId; i++) {\n        yield [i, this.has(i)];\n      }\n    }\n    /**\n     * values()\n     *\n     * @return {IterableIterator<number>} - returns an iterator of the positive\n     * values in the set\n     */\n    values() {\n      return this.set_.values();\n    }\n    /**\n     * maxId\n     *\n     * @return {number} - the highest id in this Vector\n     */\n    get maxId() {\n      return this.maxId_;\n    }\n    /**\n     * get\n     *\n     * @param {number} id - key for value to check\n     * @return {boolean} - value of that key, if never set it will be false\n     */\n    has(id) {\n      /**\n       * if it exists in the set we'll return true\n       */\n      return this.set_.has(id);\n    }\n    /**\n     * unset\n     *\n     * @param {SingleIDOrCollection} id - id or ids to unset\n     * @return {void}\n     */\n    unset(id) {\n      if (Array.isArray(id)) {\n        id.forEach(id => this.unset(id));\n      } else if (typeof id === 'object') {\n        this.unset(Object.keys(id).map(strId => Number(strId)));\n      } else {\n        this.set_.delete(Number(id));\n        /**\n         * if bitLength was set before, it must now be unset\n         */\n        this.bitLength = 0;\n        if (id === this.maxId) {\n          /**\n           * aww bummer we lost our maxId... now we've got to search through\n           * all the ids and find the biggest one.\n           */\n          this.maxId_ = 0;\n          this.set_.forEach(id => {\n            this.maxId_ = Math.max(this.maxId, id);\n          });\n        }\n      }\n    }\n    isIntMap(item) {\n      let result = typeof item === 'object';\n      result = result && Object.keys(item).every(key => {\n        let itemResult = Number.isInteger(parseInt(key, 10));\n        itemResult = itemResult && this.isValidNumber(item[key].id);\n        itemResult = itemResult && item[key].name !== undefined;\n        return itemResult;\n      });\n      return result;\n    }\n    isValidNumber(item) {\n      return parseInt(item, 10) > 0;\n    }\n    isSet(item) {\n      let result = false;\n      if (item instanceof Set) {\n        result = Array.from(item).every(this.isValidNumber);\n      }\n      return result;\n    }\n    /**\n     * set - sets an item assumed to be a truthy value by its presence\n     *\n     * @param {SingleIDOrCollection} item - May be a single id (positive integer)\n     * or collection of ids in a set, GVL Int Map, or Array.\n     *\n     * @return {void}\n     */\n    set(item) {\n      /**\n       * strategy here is to just recursively call set if it's a collection until\n       * we get to the final integer ID\n       */\n      if (Array.isArray(item)) {\n        item.forEach(item => this.set(item));\n      } else if (this.isSet(item)) {\n        this.set(Array.from(item));\n      } else if (this.isIntMap(item)) {\n        this.set(Object.keys(item).map(strId => Number(strId)));\n      } else if (this.isValidNumber(item)) {\n        this.set_.add(item);\n        this.maxId_ = Math.max(this.maxId, item);\n        /**\n         * if bitLength was set before, it must now be unset\n         */\n        this.bitLength = 0;\n      } else {\n        /**\n         * Super not cool to try and set something that's not valid\n         */\n        throw new _errorsIndexJs.TCModelError('set()', item, 'must be positive integer array, positive integer, Set<number>, or IntMap');\n      }\n    }\n    empty() {\n      this.set_ = new Set();\n    }\n    /**\n     * forEach - to traverse from id=1 to id=maxId in a sequential non-sparse manner\n     *\n     *\n     * @param {forEachCallback} callback - callback to execute\n     * @return {void}\n     *\n     * @callback forEachCallback\n     * @param {boolean} value - whether or not this id exists in the vector\n     * @param {number} id - the id number of the current iteration\n     */\n    forEach(callback) {\n      for (let i = 1; i <= this.maxId; i++) {\n        callback(this.has(i), i);\n      }\n    }\n    get size() {\n      return this.set_.size;\n    }\n    setAll(intMap) {\n      this.set(intMap);\n    }\n  }\n});","lineCount":168,"map":[[7,2,6,0,"Object"],[7,8,6,0],[7,9,6,0,"defineProperty"],[7,23,6,0],[7,24,6,0,"exports"],[7,31,6,0],[8,4,6,0,"enumerable"],[8,14,6,0],[9,4,6,0,"get"],[9,7,6,0],[9,18,6,0,"get"],[9,19,6,0],[10,6,6,0],[10,13,6,0,"Vector"],[10,19,6,0],[11,4,6,0],[12,2,6,0],[13,2,1,0],[13,6,1,0,"_CloneableJs"],[13,18,1,0],[13,21,1,0,"require"],[13,28,1,0],[13,29,1,0,"_dependencyMap"],[13,43,1,0],[14,2,2,0],[14,6,2,0,"_errorsIndexJs"],[14,20,2,0],[14,23,2,0,"require"],[14,30,2,0],[14,31,2,0,"_dependencyMap"],[14,45,2,0],[15,2,3,0],[16,0,4,0],[17,0,5,0],[18,2,6,7],[18,8,6,13,"Vector"],[18,14,6,19],[18,23,6,28,"Cloneable"],[18,35,6,37],[18,36,6,37,"Cloneable"],[18,45,6,37],[18,46,6,38],[19,4,7,4],[20,0,8,0],[21,0,9,0],[22,0,10,0],[23,4,11,4,"bitLength"],[23,13,11,13],[23,16,11,16],[23,17,11,17],[24,4,12,4,"maxId_"],[24,10,12,10],[24,13,12,13],[24,14,12,14],[25,4,13,4,"set_"],[25,8,13,8],[25,11,13,11],[25,15,13,15,"Set"],[25,18,13,18],[25,19,13,19],[25,20,13,20],[26,4,14,4],[26,6,14,6,"Symbol"],[26,12,14,12],[26,13,14,13,"iterator"],[26,21,14,21],[26,25,14,25],[27,6,15,8],[27,11,15,13],[27,15,15,17,"i"],[27,16,15,18],[27,19,15,21],[27,20,15,22],[27,22,15,24,"i"],[27,23,15,25],[27,27,15,29],[27,31,15,33],[27,32,15,34,"maxId"],[27,37,15,39],[27,39,15,41,"i"],[27,40,15,42],[27,42,15,44],[27,44,15,46],[28,8,16,12],[28,14,16,18],[28,15,16,19,"i"],[28,16,16,20],[28,18,16,22],[28,22,16,26],[28,23,16,27,"has"],[28,26,16,30],[28,27,16,31,"i"],[28,28,16,32],[28,29,16,33],[28,30,16,34],[29,6,17,8],[30,4,18,4],[31,4,19,4],[32,0,20,0],[33,0,21,0],[34,0,22,0],[35,0,23,0],[36,0,24,0],[37,4,25,4,"values"],[37,10,25,10,"values"],[37,11,25,10],[37,13,25,13],[38,6,26,8],[38,13,26,15],[38,17,26,19],[38,18,26,20,"set_"],[38,22,26,24],[38,23,26,25,"values"],[38,29,26,31],[38,30,26,32],[38,31,26,33],[39,4,27,4],[40,4,28,4],[41,0,29,0],[42,0,30,0],[43,0,31,0],[44,0,32,0],[45,4,33,4],[45,8,33,8,"maxId"],[45,13,33,13,"maxId"],[45,14,33,13],[45,16,33,16],[46,6,34,8],[46,13,34,15],[46,17,34,19],[46,18,34,20,"maxId_"],[46,24,34,26],[47,4,35,4],[48,4,36,4],[49,0,37,0],[50,0,38,0],[51,0,39,0],[52,0,40,0],[53,0,41,0],[54,4,42,4,"has"],[54,7,42,7,"has"],[54,8,42,8,"id"],[54,10,42,10],[54,12,42,12],[55,6,43,8],[56,0,44,0],[57,0,45,0],[58,6,46,8],[58,13,46,15],[58,17,46,19],[58,18,46,20,"set_"],[58,22,46,24],[58,23,46,25,"has"],[58,26,46,28],[58,27,46,29,"id"],[58,29,46,31],[58,30,46,32],[59,4,47,4],[60,4,48,4],[61,0,49,0],[62,0,50,0],[63,0,51,0],[64,0,52,0],[65,0,53,0],[66,4,54,4,"unset"],[66,9,54,9,"unset"],[66,10,54,10,"id"],[66,12,54,12],[66,14,54,14],[67,6,55,8],[67,10,55,12,"Array"],[67,15,55,17],[67,16,55,18,"isArray"],[67,23,55,25],[67,24,55,26,"id"],[67,26,55,28],[67,27,55,29],[67,29,55,31],[68,8,56,12,"id"],[68,10,56,14],[68,11,56,15,"forEach"],[68,18,56,22],[68,19,56,24,"id"],[68,21,56,26],[68,25,56,31],[68,29,56,35],[68,30,56,36,"unset"],[68,35,56,41],[68,36,56,42,"id"],[68,38,56,44],[68,39,56,45],[68,40,56,46],[69,6,57,8],[69,7,57,9],[69,13,58,13],[69,17,58,17],[69,24,58,24,"id"],[69,26,58,26],[69,31,58,31],[69,39,58,39],[69,41,58,41],[70,8,59,12],[70,12,59,16],[70,13,59,17,"unset"],[70,18,59,22],[70,19,59,23,"Object"],[70,25,59,29],[70,26,59,30,"keys"],[70,30,59,34],[70,31,59,35,"id"],[70,33,59,37],[70,34,59,38],[70,35,59,39,"map"],[70,38,59,42],[70,39,59,44,"strId"],[70,44,59,49],[70,48,59,54,"Number"],[70,54,59,60],[70,55,59,61,"strId"],[70,60,59,66],[70,61,59,67],[70,62,59,68],[70,63,59,69],[71,6,60,8],[71,7,60,9],[71,13,61,13],[72,8,62,12],[72,12,62,16],[72,13,62,17,"set_"],[72,17,62,21],[72,18,62,22,"delete"],[72,24,62,28],[72,25,62,29,"Number"],[72,31,62,35],[72,32,62,36,"id"],[72,34,62,38],[72,35,62,39],[72,36,62,40],[73,8,63,12],[74,0,64,0],[75,0,65,0],[76,8,66,12],[76,12,66,16],[76,13,66,17,"bitLength"],[76,22,66,26],[76,25,66,29],[76,26,66,30],[77,8,67,12],[77,12,67,16,"id"],[77,14,67,18],[77,19,67,23],[77,23,67,27],[77,24,67,28,"maxId"],[77,29,67,33],[77,31,67,35],[78,10,68,16],[79,0,69,0],[80,0,70,0],[81,0,71,0],[82,10,72,16],[82,14,72,20],[82,15,72,21,"maxId_"],[82,21,72,27],[82,24,72,30],[82,25,72,31],[83,10,73,16],[83,14,73,20],[83,15,73,21,"set_"],[83,19,73,25],[83,20,73,26,"forEach"],[83,27,73,33],[83,28,73,35,"id"],[83,30,73,37],[83,34,73,42],[84,12,74,20],[84,16,74,24],[84,17,74,25,"maxId_"],[84,23,74,31],[84,26,74,34,"Math"],[84,30,74,38],[84,31,74,39,"max"],[84,34,74,42],[84,35,74,43],[84,39,74,47],[84,40,74,48,"maxId"],[84,45,74,53],[84,47,74,55,"id"],[84,49,74,57],[84,50,74,58],[85,10,75,16],[85,11,75,17],[85,12,75,18],[86,8,76,12],[87,6,77,8],[88,4,78,4],[89,4,79,4,"isIntMap"],[89,12,79,12,"isIntMap"],[89,13,79,13,"item"],[89,17,79,17],[89,19,79,19],[90,6,80,8],[90,10,80,12,"result"],[90,16,80,18],[90,19,80,22],[90,26,80,29,"item"],[90,30,80,33],[90,35,80,38],[90,43,80,47],[91,6,81,8,"result"],[91,12,81,14],[91,15,81,18,"result"],[91,21,81,24],[91,25,81,28,"Object"],[91,31,81,34],[91,32,81,35,"keys"],[91,36,81,39],[91,37,81,40,"item"],[91,41,81,44],[91,42,81,45],[91,43,81,46,"every"],[91,48,81,51],[91,49,81,53,"key"],[91,52,81,56],[91,56,81,61],[92,8,82,12],[92,12,82,16,"itemResult"],[92,22,82,26],[92,25,82,29,"Number"],[92,31,82,35],[92,32,82,36,"isInteger"],[92,41,82,45],[92,42,82,46,"parseInt"],[92,50,82,54],[92,51,82,55,"key"],[92,54,82,58],[92,56,82,60],[92,58,82,62],[92,59,82,63],[92,60,82,64],[93,8,83,12,"itemResult"],[93,18,83,22],[93,21,83,26,"itemResult"],[93,31,83,36],[93,35,83,40],[93,39,83,44],[93,40,83,45,"isValidNumber"],[93,53,83,58],[93,54,83,59,"item"],[93,58,83,63],[93,59,83,64,"key"],[93,62,83,67],[93,63,83,68],[93,64,83,69,"id"],[93,66,83,71],[93,67,83,73],[94,8,84,12,"itemResult"],[94,18,84,22],[94,21,84,26,"itemResult"],[94,31,84,36],[94,35,84,40,"item"],[94,39,84,44],[94,40,84,45,"key"],[94,43,84,48],[94,44,84,49],[94,45,84,50,"name"],[94,49,84,54],[94,54,84,59,"undefined"],[94,63,84,69],[95,8,85,12],[95,15,85,19,"itemResult"],[95,25,85,29],[96,6,86,8],[96,7,86,9],[96,8,86,11],[97,6,87,8],[97,13,87,15,"result"],[97,19,87,21],[98,4,88,4],[99,4,89,4,"isValidNumber"],[99,17,89,17,"isValidNumber"],[99,18,89,18,"item"],[99,22,89,22],[99,24,89,24],[100,6,90,8],[100,13,90,16,"parseInt"],[100,21,90,24],[100,22,90,25,"item"],[100,26,90,29],[100,28,90,31],[100,30,90,33],[100,31,90,34],[100,34,90,37],[100,35,90,38],[101,4,91,4],[102,4,92,4,"isSet"],[102,9,92,9,"isSet"],[102,10,92,10,"item"],[102,14,92,14],[102,16,92,16],[103,6,93,8],[103,10,93,12,"result"],[103,16,93,18],[103,19,93,21],[103,24,93,26],[104,6,94,8],[104,10,94,12,"item"],[104,14,94,16],[104,26,94,28,"Set"],[104,29,94,31],[104,31,94,33],[105,8,95,12,"result"],[105,14,95,18],[105,17,95,21,"Array"],[105,22,95,26],[105,23,95,27,"from"],[105,27,95,31],[105,28,95,32,"item"],[105,32,95,36],[105,33,95,37],[105,34,95,38,"every"],[105,39,95,43],[105,40,95,44],[105,44,95,48],[105,45,95,49,"isValidNumber"],[105,58,95,62],[105,59,95,63],[106,6,96,8],[107,6,97,8],[107,13,97,15,"result"],[107,19,97,21],[108,4,98,4],[109,4,99,4],[110,0,100,0],[111,0,101,0],[112,0,102,0],[113,0,103,0],[114,0,104,0],[115,0,105,0],[116,0,106,0],[117,4,107,4,"set"],[117,7,107,7,"set"],[117,8,107,8,"item"],[117,12,107,12],[117,14,107,14],[118,6,108,8],[119,0,109,0],[120,0,110,0],[121,0,111,0],[122,6,112,8],[122,10,112,12,"Array"],[122,15,112,17],[122,16,112,18,"isArray"],[122,23,112,25],[122,24,112,26,"item"],[122,28,112,30],[122,29,112,31],[122,31,112,33],[123,8,113,12,"item"],[123,12,113,16],[123,13,113,17,"forEach"],[123,20,113,24],[123,21,113,26,"item"],[123,25,113,30],[123,29,113,35],[123,33,113,39],[123,34,113,40,"set"],[123,37,113,43],[123,38,113,44,"item"],[123,42,113,48],[123,43,113,49],[123,44,113,50],[124,6,114,8],[124,7,114,9],[124,13,115,13],[124,17,115,17],[124,21,115,21],[124,22,115,22,"isSet"],[124,27,115,27],[124,28,115,28,"item"],[124,32,115,32],[124,33,115,33],[124,35,115,35],[125,8,116,12],[125,12,116,16],[125,13,116,17,"set"],[125,16,116,20],[125,17,116,21,"Array"],[125,22,116,26],[125,23,116,27,"from"],[125,27,116,31],[125,28,116,32,"item"],[125,32,116,36],[125,33,116,37],[125,34,116,38],[126,6,117,8],[126,7,117,9],[126,13,118,13],[126,17,118,17],[126,21,118,21],[126,22,118,22,"isIntMap"],[126,30,118,30],[126,31,118,31,"item"],[126,35,118,35],[126,36,118,36],[126,38,118,38],[127,8,119,12],[127,12,119,16],[127,13,119,17,"set"],[127,16,119,20],[127,17,119,21,"Object"],[127,23,119,27],[127,24,119,28,"keys"],[127,28,119,32],[127,29,119,33,"item"],[127,33,119,37],[127,34,119,38],[127,35,119,39,"map"],[127,38,119,42],[127,39,119,44,"strId"],[127,44,119,49],[127,48,119,54,"Number"],[127,54,119,60],[127,55,119,61,"strId"],[127,60,119,66],[127,61,119,67],[127,62,119,68],[127,63,119,69],[128,6,120,8],[128,7,120,9],[128,13,121,13],[128,17,121,17],[128,21,121,21],[128,22,121,22,"isValidNumber"],[128,35,121,35],[128,36,121,36,"item"],[128,40,121,40],[128,41,121,41],[128,43,121,43],[129,8,122,12],[129,12,122,16],[129,13,122,17,"set_"],[129,17,122,21],[129,18,122,22,"add"],[129,21,122,25],[129,22,122,26,"item"],[129,26,122,30],[129,27,122,31],[130,8,123,12],[130,12,123,16],[130,13,123,17,"maxId_"],[130,19,123,23],[130,22,123,26,"Math"],[130,26,123,30],[130,27,123,31,"max"],[130,30,123,34],[130,31,123,35],[130,35,123,39],[130,36,123,40,"maxId"],[130,41,123,45],[130,43,123,47,"item"],[130,47,123,51],[130,48,123,52],[131,8,124,12],[132,0,125,0],[133,0,126,0],[134,8,127,12],[134,12,127,16],[134,13,127,17,"bitLength"],[134,22,127,26],[134,25,127,29],[134,26,127,30],[135,6,128,8],[135,7,128,9],[135,13,129,13],[136,8,130,12],[137,0,131,0],[138,0,132,0],[139,8,133,12],[139,14,133,18],[139,18,133,22,"TCModelError"],[139,32,133,34],[139,33,133,34,"TCModelError"],[139,45,133,34],[139,46,133,35],[139,53,133,42],[139,55,133,44,"item"],[139,59,133,48],[139,61,133,50],[139,135,133,124],[139,136,133,125],[140,6,134,8],[141,4,135,4],[142,4,136,4,"empty"],[142,9,136,9,"empty"],[142,10,136,9],[142,12,136,12],[143,6,137,8],[143,10,137,12],[143,11,137,13,"set_"],[143,15,137,17],[143,18,137,20],[143,22,137,24,"Set"],[143,25,137,27],[143,26,137,28],[143,27,137,29],[144,4,138,4],[145,4,139,4],[146,0,140,0],[147,0,141,0],[148,0,142,0],[149,0,143,0],[150,0,144,0],[151,0,145,0],[152,0,146,0],[153,0,147,0],[154,0,148,0],[155,0,149,0],[156,4,150,4,"forEach"],[156,11,150,11,"forEach"],[156,12,150,12,"callback"],[156,20,150,20],[156,22,150,22],[157,6,151,8],[157,11,151,13],[157,15,151,17,"i"],[157,16,151,18],[157,19,151,21],[157,20,151,22],[157,22,151,24,"i"],[157,23,151,25],[157,27,151,29],[157,31,151,33],[157,32,151,34,"maxId"],[157,37,151,39],[157,39,151,41,"i"],[157,40,151,42],[157,42,151,44],[157,44,151,46],[158,8,152,12,"callback"],[158,16,152,20],[158,17,152,21],[158,21,152,25],[158,22,152,26,"has"],[158,25,152,29],[158,26,152,30,"i"],[158,27,152,31],[158,28,152,32],[158,30,152,34,"i"],[158,31,152,35],[158,32,152,36],[159,6,153,8],[160,4,154,4],[161,4,155,4],[161,8,155,8,"size"],[161,12,155,12,"size"],[161,13,155,12],[161,15,155,15],[162,6,156,8],[162,13,156,15],[162,17,156,19],[162,18,156,20,"set_"],[162,22,156,24],[162,23,156,25,"size"],[162,27,156,29],[163,4,157,4],[164,4,158,4,"setAll"],[164,10,158,10,"setAll"],[164,11,158,11,"intMap"],[164,17,158,17],[164,19,158,19],[165,6,159,8],[165,10,159,12],[165,11,159,13,"set"],[165,14,159,16],[165,15,159,17,"intMap"],[165,21,159,23],[165,22,159,24],[166,4,160,4],[167,2,161,0],[168,0,161,1],[168,3]],"functionMap":{"names":["<global>","Vector","@@iterator","values","get__maxId","has","unset","id.forEach$argument_0","Object.keys.map$argument_0","set_.forEach$argument_0","isIntMap","Object.keys.every$argument_0","isValidNumber","isSet","set","item.forEach$argument_0","empty","forEach","get__size","setAll"],"mappings":"AAA;OCK;ICQ;KDI;IEO;KFE;IGM;KHE;IIO;KJK;IKO;uBCE,sBD;2CEG,wBF;kCGc;iBHE;KLG;ISC;oDCE;SDK;KTE;IWC;KXE;IYC;KZM;IaS;yBCM,wBD;2CNM,wBM;KbgB;IeC;KfE;IgBY;KhBI;IiBC;KjBE;IkBC;KlBE;CDC"},"hasCjsExports":false},"type":"js/module"}]}