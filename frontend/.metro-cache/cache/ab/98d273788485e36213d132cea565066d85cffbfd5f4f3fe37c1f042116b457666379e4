{"dependencies":[{"name":"../../errors/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":70,"index":70}}],"key":"qHglNs3UH2C2wT8WJZubASIXHQ0=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"IntEncoder\", {\n    enumerable: true,\n    get: function () {\n      return IntEncoder;\n    }\n  });\n  var _errorsIndexJs = require(_dependencyMap[0], \"../../errors/index.js\");\n  class IntEncoder {\n    static encode(value, numBits) {\n      let bitString;\n      if (typeof value === 'string') {\n        value = parseInt(value, 10);\n      }\n      bitString = value.toString(2);\n      if (bitString.length > numBits || value < 0) {\n        throw new _errorsIndexJs.EncodingError(`${value} too large to encode into ${numBits}`);\n      }\n      // Pad the string if not filling all bits\n      if (bitString.length < numBits) {\n        // pad left\n        bitString = '0'.repeat(numBits - bitString.length) + bitString;\n      }\n      return bitString;\n    }\n    static decode(value, numBits) {\n      if (numBits !== value.length) {\n        throw new _errorsIndexJs.DecodingError('invalid bit length');\n      }\n      return parseInt(value, 2);\n    }\n  }\n});","lineCount":38,"map":[[7,2,2,0,"Object"],[7,8,2,0],[7,9,2,0,"defineProperty"],[7,23,2,0],[7,24,2,0,"exports"],[7,31,2,0],[8,4,2,0,"enumerable"],[8,14,2,0],[9,4,2,0,"get"],[9,7,2,0],[9,18,2,0,"get"],[9,19,2,0],[10,6,2,0],[10,13,2,0,"IntEncoder"],[10,23,2,0],[11,4,2,0],[12,2,2,0],[13,2,1,0],[13,6,1,0,"_errorsIndexJs"],[13,20,1,0],[13,23,1,0,"require"],[13,30,1,0],[13,31,1,0,"_dependencyMap"],[13,45,1,0],[14,2,2,7],[14,8,2,13,"IntEncoder"],[14,18,2,23],[14,19,2,24],[15,4,3,4],[15,11,3,11,"encode"],[15,17,3,17,"encode"],[15,18,3,18,"value"],[15,23,3,23],[15,25,3,25,"numBits"],[15,32,3,32],[15,34,3,34],[16,6,4,8],[16,10,4,12,"bitString"],[16,19,4,21],[17,6,5,8],[17,10,5,12],[17,17,5,19,"value"],[17,22,5,24],[17,27,5,29],[17,35,5,37],[17,37,5,39],[18,8,6,12,"value"],[18,13,6,17],[18,16,6,20,"parseInt"],[18,24,6,28],[18,25,6,29,"value"],[18,30,6,34],[18,32,6,36],[18,34,6,38],[18,35,6,39],[19,6,7,8],[20,6,8,8,"bitString"],[20,15,8,17],[20,18,8,20,"value"],[20,23,8,25],[20,24,8,26,"toString"],[20,32,8,34],[20,33,8,35],[20,34,8,36],[20,35,8,37],[21,6,9,8],[21,10,9,12,"bitString"],[21,19,9,21],[21,20,9,22,"length"],[21,26,9,28],[21,29,9,31,"numBits"],[21,36,9,38],[21,40,9,42,"value"],[21,45,9,47],[21,48,9,50],[21,49,9,51],[21,51,9,53],[22,8,10,12],[22,14,10,18],[22,18,10,22,"EncodingError"],[22,32,10,35],[22,33,10,35,"EncodingError"],[22,46,10,35],[22,47,10,36],[22,50,10,39,"value"],[22,55,10,44],[22,84,10,73,"numBits"],[22,91,10,80],[22,93,10,82],[22,94,10,83],[23,6,11,8],[24,6,12,8],[25,6,13,8],[25,10,13,12,"bitString"],[25,19,13,21],[25,20,13,22,"length"],[25,26,13,28],[25,29,13,31,"numBits"],[25,36,13,38],[25,38,13,40],[26,8,14,12],[27,8,15,12,"bitString"],[27,17,15,21],[27,20,15,24],[27,23,15,27],[27,24,15,28,"repeat"],[27,30,15,34],[27,31,15,35,"numBits"],[27,38,15,42],[27,41,15,45,"bitString"],[27,50,15,54],[27,51,15,55,"length"],[27,57,15,61],[27,58,15,62],[27,61,15,65,"bitString"],[27,70,15,74],[28,6,16,8],[29,6,17,8],[29,13,17,15,"bitString"],[29,22,17,24],[30,4,18,4],[31,4,19,4],[31,11,19,11,"decode"],[31,17,19,17,"decode"],[31,18,19,18,"value"],[31,23,19,23],[31,25,19,25,"numBits"],[31,32,19,32],[31,34,19,34],[32,6,20,8],[32,10,20,12,"numBits"],[32,17,20,19],[32,22,20,24,"value"],[32,27,20,29],[32,28,20,30,"length"],[32,34,20,36],[32,36,20,38],[33,8,21,12],[33,14,21,18],[33,18,21,22,"DecodingError"],[33,32,21,35],[33,33,21,35,"DecodingError"],[33,46,21,35],[33,47,21,36],[33,67,21,56],[33,68,21,57],[34,6,22,8],[35,6,23,8],[35,13,23,15,"parseInt"],[35,21,23,23],[35,22,23,24,"value"],[35,27,23,29],[35,29,23,31],[35,30,23,32],[35,31,23,33],[36,4,24,4],[37,2,25,0],[38,0,25,1],[38,3]],"functionMap":{"names":["<global>","IntEncoder","encode","decode"],"mappings":"AAA;OCC;ICC;KDe;IEC;KFK;CDC"},"hasCjsExports":false},"type":"js/module"}]}