{"dependencies":[{"name":"../errors/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":66,"index":66}}],"key":"rg9G2hGSxUlgvvl94nwST8IJkQ8=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"Base64Url\", {\n    enumerable: true,\n    get: function () {\n      return Base64Url;\n    }\n  });\n  var _errorsIndexJs = require(_dependencyMap[0], \"../errors/index.js\");\n  class Base64Url {\n    /**\n     * Base 64 URL character set.  Different from standard Base64 char set\n     * in that '+' and '/' are replaced with '-' and '_'.\n     */\n    static DICT = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';\n    static REVERSE_DICT = new Map([['A', 0], ['B', 1], ['C', 2], ['D', 3], ['E', 4], ['F', 5], ['G', 6], ['H', 7], ['I', 8], ['J', 9], ['K', 10], ['L', 11], ['M', 12], ['N', 13], ['O', 14], ['P', 15], ['Q', 16], ['R', 17], ['S', 18], ['T', 19], ['U', 20], ['V', 21], ['W', 22], ['X', 23], ['Y', 24], ['Z', 25], ['a', 26], ['b', 27], ['c', 28], ['d', 29], ['e', 30], ['f', 31], ['g', 32], ['h', 33], ['i', 34], ['j', 35], ['k', 36], ['l', 37], ['m', 38], ['n', 39], ['o', 40], ['p', 41], ['q', 42], ['r', 43], ['s', 44], ['t', 45], ['u', 46], ['v', 47], ['w', 48], ['x', 49], ['y', 50], ['z', 51], ['0', 52], ['1', 53], ['2', 54], ['3', 55], ['4', 56], ['5', 57], ['6', 58], ['7', 59], ['8', 60], ['9', 61], ['-', 62], ['_', 63]]);\n    /**\n     * log2(64) = 6\n     */\n    static BASIS = 6;\n    static LCM = 24;\n    /**\n     * encodes an arbitrary-length bitfield string into base64url\n     *\n     * @static\n     * @param {string} str - arbitrary-length bitfield string to be encoded to base64url\n     * @return {string} - base64url encoded result\n     */\n    static encode(str) {\n      /**\n       * should only be 0 or 1\n       */\n      if (!/^[0-1]+$/.test(str)) {\n        throw new _errorsIndexJs.EncodingError('Invalid bitField');\n      }\n      /**\n       * Pad the end of the string to the least common mutliple of 6 (basis for\n       * base64) and 8 (one byte)\n       */\n      const padding = str.length % this.LCM;\n      str += padding ? '0'.repeat(this.LCM - padding) : '';\n      let result = '';\n      for (let i = 0; i < str.length; i += this.BASIS) {\n        result += this.DICT[parseInt(str.substr(i, this.BASIS), 2)];\n      }\n      return result;\n    }\n    /**\n     * decodes a base64url encoded bitfield string\n     *\n     * @static\n     * @param {string} str - base64url encoded bitfield string to be decoded\n     * @return {string} - bitfield string\n     */\n    static decode(str) {\n      /**\n       * should contain only characters from the base64url set\n       */\n      if (!/^[A-Za-z0-9\\-_]+$/.test(str)) {\n        throw new _errorsIndexJs.DecodingError('Invalidly encoded Base64URL string');\n      }\n      let result = '';\n      for (let i = 0; i < str.length; i++) {\n        /**\n         * index the binary value of the character from out reverse map\n         */\n        const strBits = this.REVERSE_DICT.get(str[i]).toString(2);\n        /**\n         * Since a bit string converted to an integer on encoding will lose\n         * leading zeros â€“ pad to the left for those missing leading zeros\n         */\n        result += '0'.repeat(this.BASIS - strBits.length) + strBits;\n      }\n      return result;\n    }\n  }\n});","lineCount":81,"map":[[7,2,2,0,"Object"],[7,8,2,0],[7,9,2,0,"defineProperty"],[7,23,2,0],[7,24,2,0,"exports"],[7,31,2,0],[8,4,2,0,"enumerable"],[8,14,2,0],[9,4,2,0,"get"],[9,7,2,0],[9,18,2,0,"get"],[9,19,2,0],[10,6,2,0],[10,13,2,0,"Base64Url"],[10,22,2,0],[11,4,2,0],[12,2,2,0],[13,2,1,0],[13,6,1,0,"_errorsIndexJs"],[13,20,1,0],[13,23,1,0,"require"],[13,30,1,0],[13,31,1,0,"_dependencyMap"],[13,45,1,0],[14,2,2,7],[14,8,2,13,"Base64Url"],[14,17,2,22],[14,18,2,23],[15,4,3,4],[16,0,4,0],[17,0,5,0],[18,0,6,0],[19,4,7,4],[19,11,7,11,"DICT"],[19,15,7,15],[19,18,7,18],[19,84,7,84],[20,4,8,4],[20,11,8,11,"REVERSE_DICT"],[20,23,8,23],[20,26,8,26],[20,30,8,30,"Map"],[20,33,8,33],[20,34,8,34],[20,35,9,8],[20,36,9,9],[20,39,9,12],[20,41,9,14],[20,42,9,15],[20,43,9,16],[20,45,9,18],[20,46,9,19],[20,49,9,22],[20,51,9,24],[20,52,9,25],[20,53,9,26],[20,55,9,28],[20,56,9,29],[20,59,9,32],[20,61,9,34],[20,62,9,35],[20,63,9,36],[20,65,9,38],[20,66,9,39],[20,69,9,42],[20,71,9,44],[20,72,9,45],[20,73,9,46],[20,75,9,48],[20,76,9,49],[20,79,9,52],[20,81,9,54],[20,82,9,55],[20,83,9,56],[20,85,9,58],[20,86,9,59],[20,89,9,62],[20,91,9,64],[20,92,9,65],[20,93,9,66],[20,95,10,8],[20,96,10,9],[20,99,10,12],[20,101,10,14],[20,102,10,15],[20,103,10,16],[20,105,10,18],[20,106,10,19],[20,109,10,22],[20,111,10,24],[20,112,10,25],[20,113,10,26],[20,115,10,28],[20,116,10,29],[20,119,10,32],[20,121,10,34],[20,122,10,35],[20,123,10,36],[20,125,10,38],[20,126,10,39],[20,129,10,42],[20,131,10,44],[20,132,10,45],[20,133,10,46],[20,135,10,48],[20,136,10,49],[20,139,10,52],[20,141,10,54],[20,143,10,56],[20,144,10,57],[20,146,10,59],[20,147,10,60],[20,150,10,63],[20,152,10,65],[20,154,10,67],[20,155,10,68],[20,157,11,8],[20,158,11,9],[20,161,11,12],[20,163,11,14],[20,165,11,16],[20,166,11,17],[20,168,11,19],[20,169,11,20],[20,172,11,23],[20,174,11,25],[20,176,11,27],[20,177,11,28],[20,179,11,30],[20,180,11,31],[20,183,11,34],[20,185,11,36],[20,187,11,38],[20,188,11,39],[20,190,11,41],[20,191,11,42],[20,194,11,45],[20,196,11,47],[20,198,11,49],[20,199,11,50],[20,201,11,52],[20,202,11,53],[20,205,11,56],[20,207,11,58],[20,209,11,60],[20,210,11,61],[20,212,11,63],[20,213,11,64],[20,216,11,67],[20,218,11,69],[20,220,11,71],[20,221,11,72],[20,223,12,8],[20,224,12,9],[20,227,12,12],[20,229,12,14],[20,231,12,16],[20,232,12,17],[20,234,12,19],[20,235,12,20],[20,238,12,23],[20,240,12,25],[20,242,12,27],[20,243,12,28],[20,245,12,30],[20,246,12,31],[20,249,12,34],[20,251,12,36],[20,253,12,38],[20,254,12,39],[20,256,12,41],[20,257,12,42],[20,260,12,45],[20,262,12,47],[20,264,12,49],[20,265,12,50],[20,267,12,52],[20,268,12,53],[20,271,12,56],[20,273,12,58],[20,275,12,60],[20,276,12,61],[20,278,12,63],[20,279,12,64],[20,282,12,67],[20,284,12,69],[20,286,12,71],[20,287,12,72],[20,289,13,8],[20,290,13,9],[20,293,13,12],[20,295,13,14],[20,297,13,16],[20,298,13,17],[20,300,13,19],[20,301,13,20],[20,304,13,23],[20,306,13,25],[20,308,13,27],[20,309,13,28],[20,311,13,30],[20,312,13,31],[20,315,13,34],[20,317,13,36],[20,319,13,38],[20,320,13,39],[20,322,13,41],[20,323,13,42],[20,326,13,45],[20,328,13,47],[20,330,13,49],[20,331,13,50],[20,333,13,52],[20,334,13,53],[20,337,13,56],[20,339,13,58],[20,341,13,60],[20,342,13,61],[20,344,13,63],[20,345,13,64],[20,348,13,67],[20,350,13,69],[20,352,13,71],[20,353,13,72],[20,355,14,8],[20,356,14,9],[20,359,14,12],[20,361,14,14],[20,363,14,16],[20,364,14,17],[20,366,14,19],[20,367,14,20],[20,370,14,23],[20,372,14,25],[20,374,14,27],[20,375,14,28],[20,377,14,30],[20,378,14,31],[20,381,14,34],[20,383,14,36],[20,385,14,38],[20,386,14,39],[20,388,14,41],[20,389,14,42],[20,392,14,45],[20,394,14,47],[20,396,14,49],[20,397,14,50],[20,399,14,52],[20,400,14,53],[20,403,14,56],[20,405,14,58],[20,407,14,60],[20,408,14,61],[20,410,14,63],[20,411,14,64],[20,414,14,67],[20,416,14,69],[20,418,14,71],[20,419,14,72],[20,421,15,8],[20,422,15,9],[20,425,15,12],[20,427,15,14],[20,429,15,16],[20,430,15,17],[20,432,15,19],[20,433,15,20],[20,436,15,23],[20,438,15,25],[20,440,15,27],[20,441,15,28],[20,443,15,30],[20,444,15,31],[20,447,15,34],[20,449,15,36],[20,451,15,38],[20,452,15,39],[20,454,15,41],[20,455,15,42],[20,458,15,45],[20,460,15,47],[20,462,15,49],[20,463,15,50],[20,465,15,52],[20,466,15,53],[20,469,15,56],[20,471,15,58],[20,473,15,60],[20,474,15,61],[20,476,15,63],[20,477,15,64],[20,480,15,67],[20,482,15,69],[20,484,15,71],[20,485,15,72],[20,487,16,8],[20,488,16,9],[20,491,16,12],[20,493,16,14],[20,495,16,16],[20,496,16,17],[20,498,16,19],[20,499,16,20],[20,502,16,23],[20,504,16,25],[20,506,16,27],[20,507,16,28],[20,509,16,30],[20,510,16,31],[20,513,16,34],[20,515,16,36],[20,517,16,38],[20,518,16,39],[20,520,16,41],[20,521,16,42],[20,524,16,45],[20,526,16,47],[20,528,16,49],[20,529,16,50],[20,531,16,52],[20,532,16,53],[20,535,16,56],[20,537,16,58],[20,539,16,60],[20,540,16,61],[20,542,16,63],[20,543,16,64],[20,546,16,67],[20,548,16,69],[20,550,16,71],[20,551,16,72],[20,553,17,8],[20,554,17,9],[20,557,17,12],[20,559,17,14],[20,561,17,16],[20,562,17,17],[20,564,17,19],[20,565,17,20],[20,568,17,23],[20,570,17,25],[20,572,17,27],[20,573,17,28],[20,575,17,30],[20,576,17,31],[20,579,17,34],[20,581,17,36],[20,583,17,38],[20,584,17,39],[20,586,17,41],[20,587,17,42],[20,590,17,45],[20,592,17,47],[20,594,17,49],[20,595,17,50],[20,597,17,52],[20,598,17,53],[20,601,17,56],[20,603,17,58],[20,605,17,60],[20,606,17,61],[20,608,17,63],[20,609,17,64],[20,612,17,67],[20,614,17,69],[20,616,17,71],[20,617,17,72],[20,619,18,8],[20,620,18,9],[20,623,18,12],[20,625,18,14],[20,627,18,16],[20,628,18,17],[20,630,18,19],[20,631,18,20],[20,634,18,23],[20,636,18,25],[20,638,18,27],[20,639,18,28],[20,641,18,30],[20,642,18,31],[20,645,18,34],[20,647,18,36],[20,649,18,38],[20,650,18,39],[20,652,18,41],[20,653,18,42],[20,656,18,45],[20,658,18,47],[20,660,18,49],[20,661,18,50],[20,663,18,52],[20,664,18,53],[20,667,18,56],[20,669,18,58],[20,671,18,60],[20,672,18,61],[20,674,18,63],[20,675,18,64],[20,678,18,67],[20,680,18,69],[20,682,18,71],[20,683,18,72],[20,685,19,8],[20,686,19,9],[20,689,19,12],[20,691,19,14],[20,693,19,16],[20,694,19,17],[20,696,19,19],[20,697,19,20],[20,700,19,23],[20,702,19,25],[20,704,19,27],[20,705,19,28],[20,707,19,30],[20,708,19,31],[20,711,19,34],[20,713,19,36],[20,715,19,38],[20,716,19,39],[20,718,19,41],[20,719,19,42],[20,722,19,45],[20,724,19,47],[20,726,19,49],[20,727,19,50],[20,728,20,5],[20,729,20,6],[21,4,21,4],[22,0,22,0],[23,0,23,0],[24,4,24,4],[24,11,24,11,"BASIS"],[24,16,24,16],[24,19,24,19],[24,20,24,20],[25,4,25,4],[25,11,25,11,"LCM"],[25,14,25,14],[25,17,25,17],[25,19,25,19],[26,4,26,4],[27,0,27,0],[28,0,28,0],[29,0,29,0],[30,0,30,0],[31,0,31,0],[32,0,32,0],[33,4,33,4],[33,11,33,11,"encode"],[33,17,33,17,"encode"],[33,18,33,18,"str"],[33,21,33,21],[33,23,33,23],[34,6,34,8],[35,0,35,0],[36,0,36,0],[37,6,37,8],[37,10,37,12],[37,11,37,13],[37,21,37,23],[37,22,37,24,"test"],[37,26,37,28],[37,27,37,29,"str"],[37,30,37,32],[37,31,37,33],[37,33,37,35],[38,8,38,12],[38,14,38,18],[38,18,38,22,"EncodingError"],[38,32,38,35],[38,33,38,35,"EncodingError"],[38,46,38,35],[38,47,38,36],[38,65,38,54],[38,66,38,55],[39,6,39,8],[40,6,40,8],[41,0,41,0],[42,0,42,0],[43,0,43,0],[44,6,44,8],[44,12,44,14,"padding"],[44,19,44,21],[44,22,44,24,"str"],[44,25,44,27],[44,26,44,28,"length"],[44,32,44,34],[44,35,44,37],[44,39,44,41],[44,40,44,42,"LCM"],[44,43,44,45],[45,6,45,8,"str"],[45,9,45,11],[45,13,45,15,"padding"],[45,20,45,22],[45,23,45,25],[45,26,45,28],[45,27,45,29,"repeat"],[45,33,45,35],[45,34,45,36],[45,38,45,40],[45,39,45,41,"LCM"],[45,42,45,44],[45,45,45,47,"padding"],[45,52,45,54],[45,53,45,55],[45,56,45,58],[45,58,45,60],[46,6,46,8],[46,10,46,12,"result"],[46,16,46,18],[46,19,46,21],[46,21,46,23],[47,6,47,8],[47,11,47,13],[47,15,47,17,"i"],[47,16,47,18],[47,19,47,21],[47,20,47,22],[47,22,47,24,"i"],[47,23,47,25],[47,26,47,28,"str"],[47,29,47,31],[47,30,47,32,"length"],[47,36,47,38],[47,38,47,40,"i"],[47,39,47,41],[47,43,47,45],[47,47,47,49],[47,48,47,50,"BASIS"],[47,53,47,55],[47,55,47,57],[48,8,48,12,"result"],[48,14,48,18],[48,18,48,22],[48,22,48,26],[48,23,48,27,"DICT"],[48,27,48,31],[48,28,48,32,"parseInt"],[48,36,48,40],[48,37,48,41,"str"],[48,40,48,44],[48,41,48,45,"substr"],[48,47,48,51],[48,48,48,52,"i"],[48,49,48,53],[48,51,48,55],[48,55,48,59],[48,56,48,60,"BASIS"],[48,61,48,65],[48,62,48,66],[48,64,48,68],[48,65,48,69],[48,66,48,70],[48,67,48,71],[49,6,49,8],[50,6,50,8],[50,13,50,15,"result"],[50,19,50,21],[51,4,51,4],[52,4,52,4],[53,0,53,0],[54,0,54,0],[55,0,55,0],[56,0,56,0],[57,0,57,0],[58,0,58,0],[59,4,59,4],[59,11,59,11,"decode"],[59,17,59,17,"decode"],[59,18,59,18,"str"],[59,21,59,21],[59,23,59,23],[60,6,60,8],[61,0,61,0],[62,0,62,0],[63,6,63,8],[63,10,63,12],[63,11,63,13],[63,30,63,32],[63,31,63,33,"test"],[63,35,63,37],[63,36,63,38,"str"],[63,39,63,41],[63,40,63,42],[63,42,63,44],[64,8,64,12],[64,14,64,18],[64,18,64,22,"DecodingError"],[64,32,64,35],[64,33,64,35,"DecodingError"],[64,46,64,35],[64,47,64,36],[64,83,64,72],[64,84,64,73],[65,6,65,8],[66,6,66,8],[66,10,66,12,"result"],[66,16,66,18],[66,19,66,21],[66,21,66,23],[67,6,67,8],[67,11,67,13],[67,15,67,17,"i"],[67,16,67,18],[67,19,67,21],[67,20,67,22],[67,22,67,24,"i"],[67,23,67,25],[67,26,67,28,"str"],[67,29,67,31],[67,30,67,32,"length"],[67,36,67,38],[67,38,67,40,"i"],[67,39,67,41],[67,41,67,43],[67,43,67,45],[68,8,68,12],[69,0,69,0],[70,0,70,0],[71,8,71,12],[71,14,71,18,"strBits"],[71,21,71,25],[71,24,71,28],[71,28,71,32],[71,29,71,33,"REVERSE_DICT"],[71,41,71,45],[71,42,71,46,"get"],[71,45,71,49],[71,46,71,50,"str"],[71,49,71,53],[71,50,71,54,"i"],[71,51,71,55],[71,52,71,56],[71,53,71,57],[71,54,71,58,"toString"],[71,62,71,66],[71,63,71,67],[71,64,71,68],[71,65,71,69],[72,8,72,12],[73,0,73,0],[74,0,74,0],[75,0,75,0],[76,8,76,12,"result"],[76,14,76,18],[76,18,76,22],[76,21,76,25],[76,22,76,26,"repeat"],[76,28,76,32],[76,29,76,33],[76,33,76,37],[76,34,76,38,"BASIS"],[76,39,76,43],[76,42,76,46,"strBits"],[76,49,76,53],[76,50,76,54,"length"],[76,56,76,60],[76,57,76,61],[76,60,76,64,"strBits"],[76,67,76,71],[77,6,77,8],[78,6,78,8],[78,13,78,15,"result"],[78,19,78,21],[79,4,79,4],[80,2,80,0],[81,0,80,1],[81,3]],"functionMap":{"names":["<global>","Base64Url","encode","decode"],"mappings":"AAA;OCC;IC+B;KDkB;IEQ;KFoB;CDC"},"hasCjsExports":false},"type":"js/module"}]}