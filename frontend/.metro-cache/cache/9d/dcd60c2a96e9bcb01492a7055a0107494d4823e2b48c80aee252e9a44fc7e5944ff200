{"dependencies":[{"name":"./encoder/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":112,"index":112}}],"key":"bONFB8PDrpZpnaO9IoSPKfVnetM=","exportNames":["*"],"imports":1}},{"name":"./model/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":113},"end":{"line":2,"column":46,"index":159}}],"key":"f1espa074SpSruazfy8ml6aS0J8=","exportNames":["*"],"imports":1}},{"name":"./encoder/field/IntEncoder.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":160},"end":{"line":3,"column":59,"index":219}}],"key":"swX3hOqwWt9tYyv07BqtXqJYPL8=","exportNames":["*"],"imports":1}},{"name":"./TCModel.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":220},"end":{"line":4,"column":39,"index":259}}],"key":"muLZiH6qNf+DARcSuL6pIovOMBI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"TCString\", {\n    enumerable: true,\n    get: function () {\n      return TCString;\n    }\n  });\n  var _encoderIndexJs = require(_dependencyMap[0], \"./encoder/index.js\");\n  var _modelIndexJs = require(_dependencyMap[1], \"./model/index.js\");\n  var _encoderFieldIntEncoderJs = require(_dependencyMap[2], \"./encoder/field/IntEncoder.js\");\n  var _TCModelJs = require(_dependencyMap[3], \"./TCModel.js\");\n  /**\n   * Main class for encoding and decoding a\n   * TCF Transparency and Consent String\n   */\n  class TCString {\n    /**\n     * encodes a model into a TCString\n     *\n     * @param {TCModel} tcModel - model to convert into encoded string\n     * @param {EncodingOptions} options - for encoding options other than default\n     * @return {string} - base64url encoded Transparency and Consent String\n     */\n    static encode(tcModel, options) {\n      let out = '';\n      let sequence;\n      tcModel = _encoderIndexJs.SemanticPreEncoder.process(tcModel, options);\n      /**\n         * If they pass in a special segment sequence.\n         */\n      if (Array.isArray(options?.segments)) {\n        sequence = options.segments;\n      } else {\n        sequence = new _encoderIndexJs.SegmentSequence(tcModel, options)['' + tcModel.version];\n      }\n      sequence.forEach((segment, idx) => {\n        let dotMaybe = '';\n        if (idx < sequence.length - 1) {\n          dotMaybe = '.';\n        }\n        out += _encoderIndexJs.SegmentEncoder.encode(tcModel, segment) + dotMaybe;\n      });\n      return out;\n    }\n    /**\n     * Decodes a string into a TCModel\n     *\n     * @param {string} encodedTCString - base64url encoded Transparency and\n     * Consent String to decode - can also be a single or group of segments of\n     * the string\n     * @param {string} [tcModel] - model to enhance with the information.  If\n     * none is passed a new instance of TCModel will be created.\n     * @return {TCModel} - Returns populated TCModel\n     */\n    static decode(encodedTCString, tcModel) {\n      const segments = encodedTCString.split('.');\n      const len = segments.length;\n      if (!tcModel) {\n        tcModel = new _TCModelJs.TCModel();\n      }\n      for (let i = 0; i < len; i++) {\n        const segString = segments[i];\n        /**\n         * first char will contain 6 bits, we only need the first 3. In version 1\n         * and 2 of the TC string there is no segment type for the CORE string.\n         * Instead the first 6 bits are reserved for the encoding version, but\n         * because we're only on a maximum of encoding version 2 the first 3 bits\n         * in the core segment will evaluate to 0.\n         */\n        const firstChar = _encoderIndexJs.Base64Url.decode(segString.charAt(0));\n        const segTypeBits = firstChar.substr(0, _encoderIndexJs.BitLength.segmentType);\n        const segment = _modelIndexJs.SegmentIDs.ID_TO_KEY[_encoderFieldIntEncoderJs.IntEncoder.decode(segTypeBits, _encoderIndexJs.BitLength.segmentType).toString()];\n        _encoderIndexJs.SegmentEncoder.decode(segString, tcModel, segment);\n      }\n      return tcModel;\n    }\n  }\n});","lineCount":83,"map":[[7,2,9,0,"Object"],[7,8,9,0],[7,9,9,0,"defineProperty"],[7,23,9,0],[7,24,9,0,"exports"],[7,31,9,0],[8,4,9,0,"enumerable"],[8,14,9,0],[9,4,9,0,"get"],[9,7,9,0],[9,18,9,0,"get"],[9,19,9,0],[10,6,9,0],[10,13,9,0,"TCString"],[10,21,9,0],[11,4,9,0],[12,2,9,0],[13,2,1,0],[13,6,1,0,"_encoderIndexJs"],[13,21,1,0],[13,24,1,0,"require"],[13,31,1,0],[13,32,1,0,"_dependencyMap"],[13,46,1,0],[14,2,2,0],[14,6,2,0,"_modelIndexJs"],[14,19,2,0],[14,22,2,0,"require"],[14,29,2,0],[14,30,2,0,"_dependencyMap"],[14,44,2,0],[15,2,3,0],[15,6,3,0,"_encoderFieldIntEncoderJs"],[15,31,3,0],[15,34,3,0,"require"],[15,41,3,0],[15,42,3,0,"_dependencyMap"],[15,56,3,0],[16,2,4,0],[16,6,4,0,"_TCModelJs"],[16,16,4,0],[16,19,4,0,"require"],[16,26,4,0],[16,27,4,0,"_dependencyMap"],[16,41,4,0],[17,2,5,0],[18,0,6,0],[19,0,7,0],[20,0,8,0],[21,2,9,7],[21,8,9,13,"TCString"],[21,16,9,21],[21,17,9,22],[22,4,10,4],[23,0,11,0],[24,0,12,0],[25,0,13,0],[26,0,14,0],[27,0,15,0],[28,0,16,0],[29,4,17,4],[29,11,17,11,"encode"],[29,17,17,17,"encode"],[29,18,17,18,"tcModel"],[29,25,17,25],[29,27,17,27,"options"],[29,34,17,34],[29,36,17,36],[30,6,18,8],[30,10,18,12,"out"],[30,13,18,15],[30,16,18,18],[30,18,18,20],[31,6,19,8],[31,10,19,12,"sequence"],[31,18,19,20],[32,6,20,8,"tcModel"],[32,13,20,15],[32,16,20,18,"SemanticPreEncoder"],[32,31,20,36],[32,32,20,36,"SemanticPreEncoder"],[32,50,20,36],[32,51,20,37,"process"],[32,58,20,44],[32,59,20,45,"tcModel"],[32,66,20,52],[32,68,20,54,"options"],[32,75,20,61],[32,76,20,62],[33,6,21,8],[34,0,22,0],[35,0,23,0],[36,6,24,8],[36,10,24,12,"Array"],[36,15,24,17],[36,16,24,18,"isArray"],[36,23,24,25],[36,24,24,26,"options"],[36,31,24,33],[36,33,24,35,"segments"],[36,41,24,43],[36,42,24,44],[36,44,24,46],[37,8,25,12,"sequence"],[37,16,25,20],[37,19,25,23,"options"],[37,26,25,30],[37,27,25,31,"segments"],[37,35,25,39],[38,6,26,8],[38,7,26,9],[38,13,27,13],[39,8,28,12,"sequence"],[39,16,28,20],[39,19,28,23],[39,23,28,27,"SegmentSequence"],[39,38,28,42],[39,39,28,42,"SegmentSequence"],[39,54,28,42],[39,55,28,43,"tcModel"],[39,62,28,50],[39,64,28,52,"options"],[39,71,28,59],[39,72,28,60],[39,73,28,61],[39,75,28,63],[39,78,28,66,"tcModel"],[39,85,28,73],[39,86,28,74,"version"],[39,93,28,81],[39,94,28,82],[40,6,29,8],[41,6,30,8,"sequence"],[41,14,30,16],[41,15,30,17,"forEach"],[41,22,30,24],[41,23,30,25],[41,24,30,26,"segment"],[41,31,30,33],[41,33,30,35,"idx"],[41,36,30,38],[41,41,30,43],[42,8,31,12],[42,12,31,16,"dotMaybe"],[42,20,31,24],[42,23,31,27],[42,25,31,29],[43,8,32,12],[43,12,32,16,"idx"],[43,15,32,19],[43,18,32,22,"sequence"],[43,26,32,30],[43,27,32,31,"length"],[43,33,32,37],[43,36,32,40],[43,37,32,41],[43,39,32,43],[44,10,33,16,"dotMaybe"],[44,18,33,24],[44,21,33,27],[44,24,33,30],[45,8,34,12],[46,8,35,12,"out"],[46,11,35,15],[46,15,35,19,"SegmentEncoder"],[46,30,35,33],[46,31,35,33,"SegmentEncoder"],[46,45,35,33],[46,46,35,34,"encode"],[46,52,35,40],[46,53,35,41,"tcModel"],[46,60,35,48],[46,62,35,50,"segment"],[46,69,35,57],[46,70,35,58],[46,73,35,61,"dotMaybe"],[46,81,35,69],[47,6,36,8],[47,7,36,9],[47,8,36,10],[48,6,37,8],[48,13,37,15,"out"],[48,16,37,18],[49,4,38,4],[50,4,39,4],[51,0,40,0],[52,0,41,0],[53,0,42,0],[54,0,43,0],[55,0,44,0],[56,0,45,0],[57,0,46,0],[58,0,47,0],[59,0,48,0],[60,4,49,4],[60,11,49,11,"decode"],[60,17,49,17,"decode"],[60,18,49,18,"encodedTCString"],[60,33,49,33],[60,35,49,35,"tcModel"],[60,42,49,42],[60,44,49,44],[61,6,50,8],[61,12,50,14,"segments"],[61,20,50,22],[61,23,50,25,"encodedTCString"],[61,38,50,40],[61,39,50,41,"split"],[61,44,50,46],[61,45,50,47],[61,48,50,50],[61,49,50,51],[62,6,51,8],[62,12,51,14,"len"],[62,15,51,17],[62,18,51,20,"segments"],[62,26,51,28],[62,27,51,29,"length"],[62,33,51,35],[63,6,52,8],[63,10,52,12],[63,11,52,13,"tcModel"],[63,18,52,20],[63,20,52,22],[64,8,53,12,"tcModel"],[64,15,53,19],[64,18,53,22],[64,22,53,26,"TCModel"],[64,32,53,33],[64,33,53,33,"TCModel"],[64,40,53,33],[64,41,53,34],[64,42,53,35],[65,6,54,8],[66,6,55,8],[66,11,55,13],[66,15,55,17,"i"],[66,16,55,18],[66,19,55,21],[66,20,55,22],[66,22,55,24,"i"],[66,23,55,25],[66,26,55,28,"len"],[66,29,55,31],[66,31,55,33,"i"],[66,32,55,34],[66,34,55,36],[66,36,55,38],[67,8,56,12],[67,14,56,18,"segString"],[67,23,56,27],[67,26,56,30,"segments"],[67,34,56,38],[67,35,56,39,"i"],[67,36,56,40],[67,37,56,41],[68,8,57,12],[69,0,58,0],[70,0,59,0],[71,0,60,0],[72,0,61,0],[73,0,62,0],[74,0,63,0],[75,8,64,12],[75,14,64,18,"firstChar"],[75,23,64,27],[75,26,64,30,"Base64Url"],[75,41,64,39],[75,42,64,39,"Base64Url"],[75,51,64,39],[75,52,64,40,"decode"],[75,58,64,46],[75,59,64,47,"segString"],[75,68,64,56],[75,69,64,57,"charAt"],[75,75,64,63],[75,76,64,64],[75,77,64,65],[75,78,64,66],[75,79,64,67],[76,8,65,12],[76,14,65,18,"segTypeBits"],[76,25,65,29],[76,28,65,32,"firstChar"],[76,37,65,41],[76,38,65,42,"substr"],[76,44,65,48],[76,45,65,49],[76,46,65,50],[76,48,65,52,"BitLength"],[76,63,65,61],[76,64,65,61,"BitLength"],[76,73,65,61],[76,74,65,62,"segmentType"],[76,85,65,73],[76,86,65,74],[77,8,66,12],[77,14,66,18,"segment"],[77,21,66,25],[77,24,66,28,"SegmentIDs"],[77,37,66,38],[77,38,66,38,"SegmentIDs"],[77,48,66,38],[77,49,66,39,"ID_TO_KEY"],[77,58,66,48],[77,59,66,49,"IntEncoder"],[77,84,66,59],[77,85,66,59,"IntEncoder"],[77,95,66,59],[77,96,66,60,"decode"],[77,102,66,66],[77,103,66,67,"segTypeBits"],[77,114,66,78],[77,116,66,80,"BitLength"],[77,131,66,89],[77,132,66,89,"BitLength"],[77,141,66,89],[77,142,66,90,"segmentType"],[77,153,66,101],[77,154,66,102],[77,155,66,103,"toString"],[77,163,66,111],[77,164,66,112],[77,165,66,113],[77,166,66,114],[78,8,67,12,"SegmentEncoder"],[78,23,67,26],[78,24,67,26,"SegmentEncoder"],[78,38,67,26],[78,39,67,27,"decode"],[78,45,67,33],[78,46,67,34,"segString"],[78,55,67,43],[78,57,67,45,"tcModel"],[78,64,67,52],[78,66,67,54,"segment"],[78,73,67,61],[78,74,67,62],[79,6,68,8],[80,6,69,8],[80,13,69,15,"tcModel"],[80,20,69,22],[81,4,70,4],[82,2,71,0],[83,0,71,1],[83,3]],"functionMap":{"names":["<global>","TCString","encode","sequence.forEach$argument_0","decode"],"mappings":"AAA;OCQ;ICQ;yBCa;SDM;KDE;IGW;KHqB;CDC"},"hasCjsExports":false},"type":"js/module"}]}