{"dependencies":[{"name":"../../model/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":46,"index":46}}],"key":"ecknVzcUu1YLgoWzPEOnNKr2bTY=","exportNames":["*"],"imports":1}},{"name":"../index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":47},"end":{"line":2,"column":40,"index":87}}],"key":"CPXQFCpxvKPxDgTlt91zfW82bsU=","exportNames":["*"],"imports":1}},{"name":"./IntEncoder.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":88},"end":{"line":3,"column":45,"index":133}}],"key":"yU5HftgQ+HW+Cj5EoqioxXCPi1U=","exportNames":["*"],"imports":1}},{"name":"./BooleanEncoder.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":134},"end":{"line":4,"column":53,"index":187}}],"key":"jvND8JXlxjrnvXLvIdr+wATPG2w=","exportNames":["*"],"imports":1}},{"name":"./FixedVectorEncoder.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":188},"end":{"line":5,"column":61,"index":249}}],"key":"0FitYV5ynVYBJm3V8Pg9suKo+Lg=","exportNames":["*"],"imports":1}},{"name":"./VectorEncodingType.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":250},"end":{"line":6,"column":61,"index":311}}],"key":"byn44PumvC/QKEpocUDhJFHT6j0=","exportNames":["*"],"imports":1}},{"name":"../../errors/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":312},"end":{"line":7,"column":54,"index":366}}],"key":"qHglNs3UH2C2wT8WJZubASIXHQ0=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"VendorVectorEncoder\", {\n    enumerable: true,\n    get: function () {\n      return VendorVectorEncoder;\n    }\n  });\n  var _modelIndexJs = require(_dependencyMap[0], \"../../model/index.js\");\n  var _indexJs = require(_dependencyMap[1], \"../index.js\");\n  var _IntEncoderJs = require(_dependencyMap[2], \"./IntEncoder.js\");\n  var _BooleanEncoderJs = require(_dependencyMap[3], \"./BooleanEncoder.js\");\n  var _FixedVectorEncoderJs = require(_dependencyMap[4], \"./FixedVectorEncoder.js\");\n  var _VectorEncodingTypeJs = require(_dependencyMap[5], \"./VectorEncodingType.js\");\n  var _errorsIndexJs = require(_dependencyMap[6], \"../../errors/index.js\");\n  class VendorVectorEncoder {\n    static encode(value) {\n      // collectors for range encoding\n      const ranges = [];\n      let range = [];\n      // since both encodings need the maxId, start with that\n      let retrString = _IntEncoderJs.IntEncoder.encode(value.maxId, _indexJs.BitLength.maxId);\n      // bit field will be just the vendors as we walk through the vector\n      let bitField = '';\n      let rangeIsSmaller;\n      // some math\n      const headerLength = _indexJs.BitLength.maxId + _indexJs.BitLength.encodingType;\n      const bitFieldLength = headerLength + value.maxId;\n      const minRangeLength = _indexJs.BitLength.vendorId * 2 + _indexJs.BitLength.singleOrRange + _indexJs.BitLength.numEntries;\n      // gets larger as we walk through the vector\n      let rangeLength = headerLength + _indexJs.BitLength.numEntries;\n      // walk through every value in the vector\n      value.forEach((curValue, i) => {\n        // build our bitfield no matter what\n        bitField += _BooleanEncoderJs.BooleanEncoder.encode(curValue);\n        /**\n         * A range is a minimum of 45 bits, if the number of vendors in this\n         * vector is less than 45 then we know that a bitfield encoding will be\n         * shorter than any range encoding.\n         *\n         * The second check checks while we walk through the vector and abandons\n         * building the ranges once it becomes larger\n         */\n        rangeIsSmaller = value.maxId > minRangeLength && rangeLength < bitFieldLength;\n        /**\n         * if the curValue is true and our rangeLength is less than the bitField\n         * length, we'll continue to push these ranges into the array.  Once the\n         * ranges become a larger encoding there is no reason to continue\n         * building the structure because we will be choosing the bitfield\n         * encoding\n         */\n        if (rangeIsSmaller && curValue) {\n          /**\n           * Look ahead to see if this is the last value in our range\n           */\n          const nextValue = value.has(i + 1);\n          // if there isn't a next value, then we'll wrap up this range\n          if (!nextValue) {\n            /**\n             * this is the last value of the range, so we'll push it on to the\n             * end into position 1\n             */\n            range.push(i);\n            // add to the range length the additional vendorId\n            rangeLength += _indexJs.BitLength.vendorId;\n            // store the array in our bigger array\n            ranges.push(range);\n            // clear the array for the next range\n            range = [];\n          } else if (range.length === 0) {\n            // this is the first  value for this range\n            range.push(i);\n            // update our count with new range overhead\n            rangeLength += _indexJs.BitLength.singleOrRange;\n            rangeLength += _indexJs.BitLength.vendorId;\n          }\n        }\n      });\n      if (rangeIsSmaller) {\n        retrString += String(_VectorEncodingTypeJs.VectorEncodingType.RANGE);\n        retrString += this.buildRangeEncoding(ranges);\n      } else {\n        retrString += String(_VectorEncodingTypeJs.VectorEncodingType.FIELD);\n        retrString += bitField;\n      }\n      return retrString;\n    }\n    static decode(value, version) {\n      let vector;\n      let index = 0;\n      const maxId = _IntEncoderJs.IntEncoder.decode(value.substr(index, _indexJs.BitLength.maxId), _indexJs.BitLength.maxId);\n      index += _indexJs.BitLength.maxId;\n      const encodingType = _IntEncoderJs.IntEncoder.decode(value.charAt(index), _indexJs.BitLength.encodingType);\n      index += _indexJs.BitLength.encodingType;\n      /**\n       * Range is handled in batches so we'll need a different decoding scheme\n       */\n      if (encodingType === _VectorEncodingTypeJs.VectorEncodingType.RANGE) {\n        vector = new _modelIndexJs.Vector();\n        if (version === 1) {\n          if (value.substr(index, 1) === '1') {\n            throw new _errorsIndexJs.DecodingError('Unable to decode default consent=1');\n          }\n          // jump over the default encoding\n          index++;\n        }\n        const numEntries = _IntEncoderJs.IntEncoder.decode(value.substr(index, _indexJs.BitLength.numEntries), _indexJs.BitLength.numEntries);\n        index += _indexJs.BitLength.numEntries;\n        // loop through each group of entries\n        for (let i = 0; i < numEntries; i++) {\n          // Ranges can represent a single id or a range of ids.\n          const isIdRange = _BooleanEncoderJs.BooleanEncoder.decode(value.charAt(index));\n          index += _indexJs.BitLength.singleOrRange;\n          /**\n           * regardless of whether or not it's a single entry or range, the next\n           * set of bits is a vendor ID\n           */\n          const firstId = _IntEncoderJs.IntEncoder.decode(value.substr(index, _indexJs.BitLength.vendorId), _indexJs.BitLength.vendorId);\n          index += _indexJs.BitLength.vendorId;\n          // if it's a range, the next set of bits is the second id\n          if (isIdRange) {\n            const secondId = _IntEncoderJs.IntEncoder.decode(value.substr(index, _indexJs.BitLength.vendorId), _indexJs.BitLength.vendorId);\n            index += _indexJs.BitLength.vendorId;\n            // we'll need to set or unset all the vendor ids between the first and second\n            for (let j = firstId; j <= secondId; j++) {\n              vector.set(j);\n            }\n          } else {\n            vector.set(firstId);\n          }\n        }\n      } else {\n        const bitField = value.substr(index, maxId);\n        index += maxId;\n        vector = _FixedVectorEncoderJs.FixedVectorEncoder.decode(bitField, maxId);\n      }\n      vector.bitLength = index;\n      return vector;\n    }\n    static buildRangeEncoding(ranges) {\n      // describe the number of entries to follow\n      const numEntries = ranges.length;\n      let rangeString = _IntEncoderJs.IntEncoder.encode(numEntries, _indexJs.BitLength.numEntries);\n      // each range\n      ranges.forEach(range => {\n        // is this range a single?\n        const single = range.length === 1;\n        // first is the indicator of whether this is a single id or range (two)\n        // 0 is single and range is 1\n        rangeString += _BooleanEncoderJs.BooleanEncoder.encode(!single);\n        // second is the first (or only) vendorId\n        rangeString += _IntEncoderJs.IntEncoder.encode(range[0], _indexJs.BitLength.vendorId);\n        if (!single) {\n          // add the second id if it exists\n          rangeString += _IntEncoderJs.IntEncoder.encode(range[1], _indexJs.BitLength.vendorId);\n        }\n      });\n      return rangeString;\n    }\n  }\n});","lineCount":165,"map":[[7,2,8,0,"Object"],[7,8,8,0],[7,9,8,0,"defineProperty"],[7,23,8,0],[7,24,8,0,"exports"],[7,31,8,0],[8,4,8,0,"enumerable"],[8,14,8,0],[9,4,8,0,"get"],[9,7,8,0],[9,18,8,0,"get"],[9,19,8,0],[10,6,8,0],[10,13,8,0,"VendorVectorEncoder"],[10,32,8,0],[11,4,8,0],[12,2,8,0],[13,2,1,0],[13,6,1,0,"_modelIndexJs"],[13,19,1,0],[13,22,1,0,"require"],[13,29,1,0],[13,30,1,0,"_dependencyMap"],[13,44,1,0],[14,2,2,0],[14,6,2,0,"_indexJs"],[14,14,2,0],[14,17,2,0,"require"],[14,24,2,0],[14,25,2,0,"_dependencyMap"],[14,39,2,0],[15,2,3,0],[15,6,3,0,"_IntEncoderJs"],[15,19,3,0],[15,22,3,0,"require"],[15,29,3,0],[15,30,3,0,"_dependencyMap"],[15,44,3,0],[16,2,4,0],[16,6,4,0,"_BooleanEncoderJs"],[16,23,4,0],[16,26,4,0,"require"],[16,33,4,0],[16,34,4,0,"_dependencyMap"],[16,48,4,0],[17,2,5,0],[17,6,5,0,"_FixedVectorEncoderJs"],[17,27,5,0],[17,30,5,0,"require"],[17,37,5,0],[17,38,5,0,"_dependencyMap"],[17,52,5,0],[18,2,6,0],[18,6,6,0,"_VectorEncodingTypeJs"],[18,27,6,0],[18,30,6,0,"require"],[18,37,6,0],[18,38,6,0,"_dependencyMap"],[18,52,6,0],[19,2,7,0],[19,6,7,0,"_errorsIndexJs"],[19,20,7,0],[19,23,7,0,"require"],[19,30,7,0],[19,31,7,0,"_dependencyMap"],[19,45,7,0],[20,2,8,7],[20,8,8,13,"VendorVectorEncoder"],[20,27,8,32],[20,28,8,33],[21,4,9,4],[21,11,9,11,"encode"],[21,17,9,17,"encode"],[21,18,9,18,"value"],[21,23,9,23],[21,25,9,25],[22,6,10,8],[23,6,11,8],[23,12,11,14,"ranges"],[23,18,11,20],[23,21,11,23],[23,23,11,25],[24,6,12,8],[24,10,12,12,"range"],[24,15,12,17],[24,18,12,20],[24,20,12,22],[25,6,13,8],[26,6,14,8],[26,10,14,12,"retrString"],[26,20,14,22],[26,23,14,25,"IntEncoder"],[26,36,14,35],[26,37,14,35,"IntEncoder"],[26,47,14,35],[26,48,14,36,"encode"],[26,54,14,42],[26,55,14,43,"value"],[26,60,14,48],[26,61,14,49,"maxId"],[26,66,14,54],[26,68,14,56,"BitLength"],[26,76,14,65],[26,77,14,65,"BitLength"],[26,86,14,65],[26,87,14,66,"maxId"],[26,92,14,71],[26,93,14,72],[27,6,15,8],[28,6,16,8],[28,10,16,12,"bitField"],[28,18,16,20],[28,21,16,23],[28,23,16,25],[29,6,17,8],[29,10,17,12,"rangeIsSmaller"],[29,24,17,26],[30,6,18,8],[31,6,19,8],[31,12,19,14,"headerLength"],[31,24,19,26],[31,27,19,29,"BitLength"],[31,35,19,38],[31,36,19,38,"BitLength"],[31,45,19,38],[31,46,19,39,"maxId"],[31,51,19,44],[31,54,19,47,"BitLength"],[31,62,19,56],[31,63,19,56,"BitLength"],[31,72,19,56],[31,73,19,57,"encodingType"],[31,85,19,69],[32,6,20,8],[32,12,20,14,"bitFieldLength"],[32,26,20,28],[32,29,20,31,"headerLength"],[32,41,20,43],[32,44,20,46,"value"],[32,49,20,51],[32,50,20,52,"maxId"],[32,55,20,57],[33,6,21,8],[33,12,21,14,"minRangeLength"],[33,26,21,28],[33,29,21,32,"BitLength"],[33,37,21,41],[33,38,21,41,"BitLength"],[33,47,21,41],[33,48,21,42,"vendorId"],[33,56,21,50],[33,59,21,53],[33,60,21,54],[33,63,21,57,"BitLength"],[33,71,21,66],[33,72,21,66,"BitLength"],[33,81,21,66],[33,82,21,67,"singleOrRange"],[33,95,21,80],[33,98,21,83,"BitLength"],[33,106,21,92],[33,107,21,92,"BitLength"],[33,116,21,92],[33,117,21,93,"numEntries"],[33,127,21,104],[34,6,22,8],[35,6,23,8],[35,10,23,12,"rangeLength"],[35,21,23,23],[35,24,23,26,"headerLength"],[35,36,23,38],[35,39,23,41,"BitLength"],[35,47,23,50],[35,48,23,50,"BitLength"],[35,57,23,50],[35,58,23,51,"numEntries"],[35,68,23,61],[36,6,24,8],[37,6,25,8,"value"],[37,11,25,13],[37,12,25,14,"forEach"],[37,19,25,21],[37,20,25,22],[37,21,25,23,"curValue"],[37,29,25,31],[37,31,25,33,"i"],[37,32,25,34],[37,37,25,39],[38,8,26,12],[39,8,27,12,"bitField"],[39,16,27,20],[39,20,27,24,"BooleanEncoder"],[39,37,27,38],[39,38,27,38,"BooleanEncoder"],[39,52,27,38],[39,53,27,39,"encode"],[39,59,27,45],[39,60,27,46,"curValue"],[39,68,27,54],[39,69,27,55],[40,8,28,12],[41,0,29,0],[42,0,30,0],[43,0,31,0],[44,0,32,0],[45,0,33,0],[46,0,34,0],[47,0,35,0],[48,8,36,12,"rangeIsSmaller"],[48,22,36,26],[48,25,36,30,"value"],[48,30,36,35],[48,31,36,36,"maxId"],[48,36,36,41],[48,39,36,44,"minRangeLength"],[48,53,36,58],[48,57,36,62,"rangeLength"],[48,68,36,73],[48,71,36,76,"bitFieldLength"],[48,85,36,91],[49,8,37,12],[50,0,38,0],[51,0,39,0],[52,0,40,0],[53,0,41,0],[54,0,42,0],[55,0,43,0],[56,8,44,12],[56,12,44,16,"rangeIsSmaller"],[56,26,44,30],[56,30,44,34,"curValue"],[56,38,44,42],[56,40,44,44],[57,10,45,16],[58,0,46,0],[59,0,47,0],[60,10,48,16],[60,16,48,22,"nextValue"],[60,25,48,31],[60,28,48,34,"value"],[60,33,48,39],[60,34,48,40,"has"],[60,37,48,43],[60,38,48,44,"i"],[60,39,48,45],[60,42,48,48],[60,43,48,49],[60,44,48,50],[61,10,49,16],[62,10,50,16],[62,14,50,20],[62,15,50,21,"nextValue"],[62,24,50,30],[62,26,50,32],[63,12,51,20],[64,0,52,0],[65,0,53,0],[66,0,54,0],[67,12,55,20,"range"],[67,17,55,25],[67,18,55,26,"push"],[67,22,55,30],[67,23,55,31,"i"],[67,24,55,32],[67,25,55,33],[68,12,56,20],[69,12,57,20,"rangeLength"],[69,23,57,31],[69,27,57,35,"BitLength"],[69,35,57,44],[69,36,57,44,"BitLength"],[69,45,57,44],[69,46,57,45,"vendorId"],[69,54,57,53],[70,12,58,20],[71,12,59,20,"ranges"],[71,18,59,26],[71,19,59,27,"push"],[71,23,59,31],[71,24,59,32,"range"],[71,29,59,37],[71,30,59,38],[72,12,60,20],[73,12,61,20,"range"],[73,17,61,25],[73,20,61,28],[73,22,61,30],[74,10,62,16],[74,11,62,17],[74,17,63,21],[74,21,63,25,"range"],[74,26,63,30],[74,27,63,31,"length"],[74,33,63,37],[74,38,63,42],[74,39,63,43],[74,41,63,45],[75,12,64,20],[76,12,65,20,"range"],[76,17,65,25],[76,18,65,26,"push"],[76,22,65,30],[76,23,65,31,"i"],[76,24,65,32],[76,25,65,33],[77,12,66,20],[78,12,67,20,"rangeLength"],[78,23,67,31],[78,27,67,35,"BitLength"],[78,35,67,44],[78,36,67,44,"BitLength"],[78,45,67,44],[78,46,67,45,"singleOrRange"],[78,59,67,58],[79,12,68,20,"rangeLength"],[79,23,68,31],[79,27,68,35,"BitLength"],[79,35,68,44],[79,36,68,44,"BitLength"],[79,45,68,44],[79,46,68,45,"vendorId"],[79,54,68,53],[80,10,69,16],[81,8,70,12],[82,6,71,8],[82,7,71,9],[82,8,71,10],[83,6,72,8],[83,10,72,12,"rangeIsSmaller"],[83,24,72,26],[83,26,72,28],[84,8,73,12,"retrString"],[84,18,73,22],[84,22,73,26,"String"],[84,28,73,32],[84,29,73,33,"VectorEncodingType"],[84,50,73,51],[84,51,73,51,"VectorEncodingType"],[84,69,73,51],[84,70,73,52,"RANGE"],[84,75,73,57],[84,76,73,58],[85,8,74,12,"retrString"],[85,18,74,22],[85,22,74,26],[85,26,74,30],[85,27,74,31,"buildRangeEncoding"],[85,45,74,49],[85,46,74,50,"ranges"],[85,52,74,56],[85,53,74,57],[86,6,75,8],[86,7,75,9],[86,13,76,13],[87,8,77,12,"retrString"],[87,18,77,22],[87,22,77,26,"String"],[87,28,77,32],[87,29,77,33,"VectorEncodingType"],[87,50,77,51],[87,51,77,51,"VectorEncodingType"],[87,69,77,51],[87,70,77,52,"FIELD"],[87,75,77,57],[87,76,77,58],[88,8,78,12,"retrString"],[88,18,78,22],[88,22,78,26,"bitField"],[88,30,78,34],[89,6,79,8],[90,6,80,8],[90,13,80,15,"retrString"],[90,23,80,25],[91,4,81,4],[92,4,82,4],[92,11,82,11,"decode"],[92,17,82,17,"decode"],[92,18,82,18,"value"],[92,23,82,23],[92,25,82,25,"version"],[92,32,82,32],[92,34,82,34],[93,6,83,8],[93,10,83,12,"vector"],[93,16,83,18],[94,6,84,8],[94,10,84,12,"index"],[94,15,84,17],[94,18,84,20],[94,19,84,21],[95,6,85,8],[95,12,85,14,"maxId"],[95,17,85,19],[95,20,85,22,"IntEncoder"],[95,33,85,32],[95,34,85,32,"IntEncoder"],[95,44,85,32],[95,45,85,33,"decode"],[95,51,85,39],[95,52,85,40,"value"],[95,57,85,45],[95,58,85,46,"substr"],[95,64,85,52],[95,65,85,53,"index"],[95,70,85,58],[95,72,85,60,"BitLength"],[95,80,85,69],[95,81,85,69,"BitLength"],[95,90,85,69],[95,91,85,70,"maxId"],[95,96,85,75],[95,97,85,76],[95,99,85,78,"BitLength"],[95,107,85,87],[95,108,85,87,"BitLength"],[95,117,85,87],[95,118,85,88,"maxId"],[95,123,85,93],[95,124,85,94],[96,6,86,8,"index"],[96,11,86,13],[96,15,86,17,"BitLength"],[96,23,86,26],[96,24,86,26,"BitLength"],[96,33,86,26],[96,34,86,27,"maxId"],[96,39,86,32],[97,6,87,8],[97,12,87,14,"encodingType"],[97,24,87,26],[97,27,87,29,"IntEncoder"],[97,40,87,39],[97,41,87,39,"IntEncoder"],[97,51,87,39],[97,52,87,40,"decode"],[97,58,87,46],[97,59,87,47,"value"],[97,64,87,52],[97,65,87,53,"charAt"],[97,71,87,59],[97,72,87,60,"index"],[97,77,87,65],[97,78,87,66],[97,80,87,68,"BitLength"],[97,88,87,77],[97,89,87,77,"BitLength"],[97,98,87,77],[97,99,87,78,"encodingType"],[97,111,87,90],[97,112,87,91],[98,6,88,8,"index"],[98,11,88,13],[98,15,88,17,"BitLength"],[98,23,88,26],[98,24,88,26,"BitLength"],[98,33,88,26],[98,34,88,27,"encodingType"],[98,46,88,39],[99,6,89,8],[100,0,90,0],[101,0,91,0],[102,6,92,8],[102,10,92,12,"encodingType"],[102,22,92,24],[102,27,92,29,"VectorEncodingType"],[102,48,92,47],[102,49,92,47,"VectorEncodingType"],[102,67,92,47],[102,68,92,48,"RANGE"],[102,73,92,53],[102,75,92,55],[103,8,93,12,"vector"],[103,14,93,18],[103,17,93,21],[103,21,93,25,"Vector"],[103,34,93,31],[103,35,93,31,"Vector"],[103,41,93,31],[103,42,93,32],[103,43,93,33],[104,8,94,12],[104,12,94,16,"version"],[104,19,94,23],[104,24,94,28],[104,25,94,29],[104,27,94,31],[105,10,95,16],[105,14,95,20,"value"],[105,19,95,25],[105,20,95,26,"substr"],[105,26,95,32],[105,27,95,33,"index"],[105,32,95,38],[105,34,95,40],[105,35,95,41],[105,36,95,42],[105,41,95,47],[105,44,95,50],[105,46,95,52],[106,12,96,20],[106,18,96,26],[106,22,96,30,"DecodingError"],[106,36,96,43],[106,37,96,43,"DecodingError"],[106,50,96,43],[106,51,96,44],[106,87,96,80],[106,88,96,81],[107,10,97,16],[108,10,98,16],[109,10,99,16,"index"],[109,15,99,21],[109,17,99,23],[110,8,100,12],[111,8,101,12],[111,14,101,18,"numEntries"],[111,24,101,28],[111,27,101,31,"IntEncoder"],[111,40,101,41],[111,41,101,41,"IntEncoder"],[111,51,101,41],[111,52,101,42,"decode"],[111,58,101,48],[111,59,101,49,"value"],[111,64,101,54],[111,65,101,55,"substr"],[111,71,101,61],[111,72,101,62,"index"],[111,77,101,67],[111,79,101,69,"BitLength"],[111,87,101,78],[111,88,101,78,"BitLength"],[111,97,101,78],[111,98,101,79,"numEntries"],[111,108,101,89],[111,109,101,90],[111,111,101,92,"BitLength"],[111,119,101,101],[111,120,101,101,"BitLength"],[111,129,101,101],[111,130,101,102,"numEntries"],[111,140,101,112],[111,141,101,113],[112,8,102,12,"index"],[112,13,102,17],[112,17,102,21,"BitLength"],[112,25,102,30],[112,26,102,30,"BitLength"],[112,35,102,30],[112,36,102,31,"numEntries"],[112,46,102,41],[113,8,103,12],[114,8,104,12],[114,13,104,17],[114,17,104,21,"i"],[114,18,104,22],[114,21,104,25],[114,22,104,26],[114,24,104,28,"i"],[114,25,104,29],[114,28,104,32,"numEntries"],[114,38,104,42],[114,40,104,44,"i"],[114,41,104,45],[114,43,104,47],[114,45,104,49],[115,10,105,16],[116,10,106,16],[116,16,106,22,"isIdRange"],[116,25,106,31],[116,28,106,34,"BooleanEncoder"],[116,45,106,48],[116,46,106,48,"BooleanEncoder"],[116,60,106,48],[116,61,106,49,"decode"],[116,67,106,55],[116,68,106,56,"value"],[116,73,106,61],[116,74,106,62,"charAt"],[116,80,106,68],[116,81,106,69,"index"],[116,86,106,74],[116,87,106,75],[116,88,106,76],[117,10,107,16,"index"],[117,15,107,21],[117,19,107,25,"BitLength"],[117,27,107,34],[117,28,107,34,"BitLength"],[117,37,107,34],[117,38,107,35,"singleOrRange"],[117,51,107,48],[118,10,108,16],[119,0,109,0],[120,0,110,0],[121,0,111,0],[122,10,112,16],[122,16,112,22,"firstId"],[122,23,112,29],[122,26,112,32,"IntEncoder"],[122,39,112,42],[122,40,112,42,"IntEncoder"],[122,50,112,42],[122,51,112,43,"decode"],[122,57,112,49],[122,58,112,50,"value"],[122,63,112,55],[122,64,112,56,"substr"],[122,70,112,62],[122,71,112,63,"index"],[122,76,112,68],[122,78,112,70,"BitLength"],[122,86,112,79],[122,87,112,79,"BitLength"],[122,96,112,79],[122,97,112,80,"vendorId"],[122,105,112,88],[122,106,112,89],[122,108,112,91,"BitLength"],[122,116,112,100],[122,117,112,100,"BitLength"],[122,126,112,100],[122,127,112,101,"vendorId"],[122,135,112,109],[122,136,112,110],[123,10,113,16,"index"],[123,15,113,21],[123,19,113,25,"BitLength"],[123,27,113,34],[123,28,113,34,"BitLength"],[123,37,113,34],[123,38,113,35,"vendorId"],[123,46,113,43],[124,10,114,16],[125,10,115,16],[125,14,115,20,"isIdRange"],[125,23,115,29],[125,25,115,31],[126,12,116,20],[126,18,116,26,"secondId"],[126,26,116,34],[126,29,116,37,"IntEncoder"],[126,42,116,47],[126,43,116,47,"IntEncoder"],[126,53,116,47],[126,54,116,48,"decode"],[126,60,116,54],[126,61,116,55,"value"],[126,66,116,60],[126,67,116,61,"substr"],[126,73,116,67],[126,74,116,68,"index"],[126,79,116,73],[126,81,116,75,"BitLength"],[126,89,116,84],[126,90,116,84,"BitLength"],[126,99,116,84],[126,100,116,85,"vendorId"],[126,108,116,93],[126,109,116,94],[126,111,116,96,"BitLength"],[126,119,116,105],[126,120,116,105,"BitLength"],[126,129,116,105],[126,130,116,106,"vendorId"],[126,138,116,114],[126,139,116,115],[127,12,117,20,"index"],[127,17,117,25],[127,21,117,29,"BitLength"],[127,29,117,38],[127,30,117,38,"BitLength"],[127,39,117,38],[127,40,117,39,"vendorId"],[127,48,117,47],[128,12,118,20],[129,12,119,20],[129,17,119,25],[129,21,119,29,"j"],[129,22,119,30],[129,25,119,33,"firstId"],[129,32,119,40],[129,34,119,42,"j"],[129,35,119,43],[129,39,119,47,"secondId"],[129,47,119,55],[129,49,119,57,"j"],[129,50,119,58],[129,52,119,60],[129,54,119,62],[130,14,120,24,"vector"],[130,20,120,30],[130,21,120,31,"set"],[130,24,120,34],[130,25,120,35,"j"],[130,26,120,36],[130,27,120,37],[131,12,121,20],[132,10,122,16],[132,11,122,17],[132,17,123,21],[133,12,124,20,"vector"],[133,18,124,26],[133,19,124,27,"set"],[133,22,124,30],[133,23,124,31,"firstId"],[133,30,124,38],[133,31,124,39],[134,10,125,16],[135,8,126,12],[136,6,127,8],[136,7,127,9],[136,13,128,13],[137,8,129,12],[137,14,129,18,"bitField"],[137,22,129,26],[137,25,129,29,"value"],[137,30,129,34],[137,31,129,35,"substr"],[137,37,129,41],[137,38,129,42,"index"],[137,43,129,47],[137,45,129,49,"maxId"],[137,50,129,54],[137,51,129,55],[138,8,130,12,"index"],[138,13,130,17],[138,17,130,21,"maxId"],[138,22,130,26],[139,8,131,12,"vector"],[139,14,131,18],[139,17,131,21,"FixedVectorEncoder"],[139,38,131,39],[139,39,131,39,"FixedVectorEncoder"],[139,57,131,39],[139,58,131,40,"decode"],[139,64,131,46],[139,65,131,47,"bitField"],[139,73,131,55],[139,75,131,57,"maxId"],[139,80,131,62],[139,81,131,63],[140,6,132,8],[141,6,133,8,"vector"],[141,12,133,14],[141,13,133,15,"bitLength"],[141,22,133,24],[141,25,133,27,"index"],[141,30,133,32],[142,6,134,8],[142,13,134,15,"vector"],[142,19,134,21],[143,4,135,4],[144,4,136,4],[144,11,136,11,"buildRangeEncoding"],[144,29,136,29,"buildRangeEncoding"],[144,30,136,30,"ranges"],[144,36,136,36],[144,38,136,38],[145,6,137,8],[146,6,138,8],[146,12,138,14,"numEntries"],[146,22,138,24],[146,25,138,27,"ranges"],[146,31,138,33],[146,32,138,34,"length"],[146,38,138,40],[147,6,139,8],[147,10,139,12,"rangeString"],[147,21,139,23],[147,24,139,26,"IntEncoder"],[147,37,139,36],[147,38,139,36,"IntEncoder"],[147,48,139,36],[147,49,139,37,"encode"],[147,55,139,43],[147,56,139,44,"numEntries"],[147,66,139,54],[147,68,139,56,"BitLength"],[147,76,139,65],[147,77,139,65,"BitLength"],[147,86,139,65],[147,87,139,66,"numEntries"],[147,97,139,76],[147,98,139,77],[148,6,140,8],[149,6,141,8,"ranges"],[149,12,141,14],[149,13,141,15,"forEach"],[149,20,141,22],[149,21,141,24,"range"],[149,26,141,29],[149,30,141,34],[150,8,142,12],[151,8,143,12],[151,14,143,18,"single"],[151,20,143,24],[151,23,143,28,"range"],[151,28,143,33],[151,29,143,34,"length"],[151,35,143,40],[151,40,143,45],[151,41,143,47],[152,8,144,12],[153,8,145,12],[154,8,146,12,"rangeString"],[154,19,146,23],[154,23,146,27,"BooleanEncoder"],[154,40,146,41],[154,41,146,41,"BooleanEncoder"],[154,55,146,41],[154,56,146,42,"encode"],[154,62,146,48],[154,63,146,49],[154,64,146,50,"single"],[154,70,146,56],[154,71,146,57],[155,8,147,12],[156,8,148,12,"rangeString"],[156,19,148,23],[156,23,148,27,"IntEncoder"],[156,36,148,37],[156,37,148,37,"IntEncoder"],[156,47,148,37],[156,48,148,38,"encode"],[156,54,148,44],[156,55,148,45,"range"],[156,60,148,50],[156,61,148,51],[156,62,148,52],[156,63,148,53],[156,65,148,55,"BitLength"],[156,73,148,64],[156,74,148,64,"BitLength"],[156,83,148,64],[156,84,148,65,"vendorId"],[156,92,148,73],[156,93,148,74],[157,8,149,12],[157,12,149,16],[157,13,149,17,"single"],[157,19,149,23],[157,21,149,25],[158,10,150,16],[159,10,151,16,"rangeString"],[159,21,151,27],[159,25,151,31,"IntEncoder"],[159,38,151,41],[159,39,151,41,"IntEncoder"],[159,49,151,41],[159,50,151,42,"encode"],[159,56,151,48],[159,57,151,49,"range"],[159,62,151,54],[159,63,151,55],[159,64,151,56],[159,65,151,57],[159,67,151,59,"BitLength"],[159,75,151,68],[159,76,151,68,"BitLength"],[159,85,151,68],[159,86,151,69,"vendorId"],[159,94,151,77],[159,95,151,78],[160,8,152,12],[161,6,153,8],[161,7,153,9],[161,8,153,10],[162,6,154,8],[162,13,154,15,"rangeString"],[162,24,154,26],[163,4,155,4],[164,2,156,0],[165,0,156,1],[165,3]],"functionMap":{"names":["<global>","VendorVectorEncoder","encode","value.forEach$argument_0","decode","buildRangeEncoding","ranges.forEach$argument_0"],"mappings":"AAA;OCO;ICC;sBCgB;SD8C;KDU;IGC;KHqD;IIC;uBCK;SDY;KJE;CDC"},"hasCjsExports":false},"type":"js/module"}]}