{"dependencies":[{"name":"../errors/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":51,"index":51}}],"key":"rg9G2hGSxUlgvvl94nwST8IJkQ8=","exportNames":["*"],"imports":1}},{"name":"../model/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":52},"end":{"line":2,"column":52,"index":104}}],"key":"CtBebnGS/4nZdZlVrl5RR9qrROU=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"SemanticPreEncoder\", {\n    enumerable: true,\n    get: function () {\n      return SemanticPreEncoder;\n    }\n  });\n  var _errorsIndexJs = require(_dependencyMap[0], \"../errors/index.js\");\n  var _modelIndexJs = require(_dependencyMap[1], \"../model/index.js\");\n  class SemanticPreEncoder {\n    static processor = [tcModel => tcModel, (tcModel, gvl) => {\n      /**\n       * in case this wasn't set previously.  This should filter out invalid\n       * purpose restrictions.\n       */\n      tcModel.publisherRestrictions.gvl = gvl;\n      /**\n       * Purpose 1 is never allowed to be true for legitimate interest\n       */\n      tcModel.purposeLegitimateInterests.unset(1);\n      /**\n       * If a Vendor does not declare a purpose for consent or legitimate\n       * interest they should not have a positive signal for it. This code\n       * removes positive signals created mistakingly.\n       */\n      const vectorToIntMap = new Map();\n      vectorToIntMap.set('legIntPurposes', tcModel.vendorLegitimateInterests);\n      vectorToIntMap.set('purposes', tcModel.vendorConsents);\n      vectorToIntMap.forEach((vector, gvlVendorKey) => {\n        vector.forEach((value, vendorId) => {\n          if (value) {\n            const vendor = gvl.vendors[vendorId];\n            if (!vendor || vendor.deletedDate) {\n              /**\n               * If the vendor doesn't exist, then they should not receive a\n               * positive signal\n               */\n              vector.unset(vendorId);\n            } else if (vendor[gvlVendorKey].length === 0) {\n              if (gvlVendorKey === 'legIntPurposes' && vendor['purposes'].length === 0 && vendor['legIntPurposes'].length === 0 && vendor['specialPurposes'].length > 0) {\n                /**\n                 * Per June 2021 Policy change, Vendors declaring only Special Purposes must\n                 * have their legitimate interest Vendor bit set if they have been disclosed.\n                 * This empty block ensures their LI bit remains set\n                 */\n              } else {\n                /**\n                 * If the vendor does exist, but they haven't declared any\n                 * purposes for this legal basis, then we need to see if they can\n                 * possibly have the legal basis from their flexible purposes.\n                 */\n                if (tcModel.isServiceSpecific) {\n                  if (vendor.flexiblePurposes.length === 0) {\n                    /**\n                     * No flexible basis for any purposes, so we can safely remove\n                     * this vendor from the legal basis.\n                     */\n                    vector.unset(vendorId);\n                  } else {\n                    /**\n                     * They have some flexible purposes, we should check for a\n                     * publisher restriction value that would enable this vendor to\n                     * have the override-preferred basis.\n                     */\n                    const restrictions = tcModel.publisherRestrictions.getRestrictions(vendorId);\n                    let isValid = false;\n                    for (let i = 0, len = restrictions.length; i < len && !isValid; i++) {\n                      /**\n                       * If this condition is true the loop will break.  If we are\n                       * dealing with the consent purposes ('purposes') and the\n                       * publisher restriction overrides to consent then it is\n                       * valid for the vendor to have a positive signal for\n                       * consent.  Likewise for legitimate interest purposes\n                       * ('legIntPurposes') and requiring legitimate interest.\n                       */\n                      isValid = restrictions[i].restrictionType === _modelIndexJs.RestrictionType.REQUIRE_CONSENT && gvlVendorKey === 'purposes' || restrictions[i].restrictionType === _modelIndexJs.RestrictionType.REQUIRE_LI && gvlVendorKey === 'legIntPurposes';\n                    }\n                    if (!isValid) {\n                      /**\n                       * if we came through the previous  loop without finding a\n                       * valid reasing: no overriding restrictions (changes in\n                       * legal basis) then it's not valid for this vendor to have\n                       * this legal basis.\n                       */\n                      vector.unset(vendorId);\n                    }\n                  }\n                } else {\n                  /**\n                   * This is a globally-scoped string so flexible purposes will not\n                   * be able to change this value because purposeRestrictions only\n                   * apply to service-specific strings.\n                   */\n                  vector.unset(vendorId);\n                }\n              }\n            }\n          }\n        });\n      });\n      tcModel.vendorsDisclosed.set(gvl.vendors);\n      return tcModel;\n    }];\n    static process(tcModel, options) {\n      const gvl = tcModel.gvl;\n      if (!gvl) {\n        throw new _errorsIndexJs.EncodingError('Unable to encode TCModel without a GVL');\n      }\n      if (!gvl.isReady) {\n        throw new _errorsIndexJs.EncodingError('Unable to encode TCModel tcModel.gvl.readyPromise is not resolved');\n      }\n      tcModel = tcModel.clone();\n      tcModel.consentLanguage = gvl.language.toUpperCase();\n      if (options?.version > 0 && options?.version <= this.processor.length) {\n        tcModel.version = options.version;\n      } else {\n        /**\n         * this is equal to the latest or most current version\n         */\n        tcModel.version = this.processor.length;\n      }\n      const processorFunctionIndex = tcModel.version - 1;\n      if (!this.processor[processorFunctionIndex]) {\n        throw new _errorsIndexJs.EncodingError(`Invalid version: ${tcModel.version}`);\n      }\n      return this.processor[processorFunctionIndex](tcModel, gvl);\n    }\n  }\n});","lineCount":134,"map":[[7,2,3,0,"Object"],[7,8,3,0],[7,9,3,0,"defineProperty"],[7,23,3,0],[7,24,3,0,"exports"],[7,31,3,0],[8,4,3,0,"enumerable"],[8,14,3,0],[9,4,3,0,"get"],[9,7,3,0],[9,18,3,0,"get"],[9,19,3,0],[10,6,3,0],[10,13,3,0,"SemanticPreEncoder"],[10,31,3,0],[11,4,3,0],[12,2,3,0],[13,2,1,0],[13,6,1,0,"_errorsIndexJs"],[13,20,1,0],[13,23,1,0,"require"],[13,30,1,0],[13,31,1,0,"_dependencyMap"],[13,45,1,0],[14,2,2,0],[14,6,2,0,"_modelIndexJs"],[14,19,2,0],[14,22,2,0,"require"],[14,29,2,0],[14,30,2,0,"_dependencyMap"],[14,44,2,0],[15,2,3,7],[15,8,3,13,"SemanticPreEncoder"],[15,26,3,31],[15,27,3,32],[16,4,4,4],[16,11,4,11,"processor"],[16,20,4,20],[16,23,4,23],[16,24,5,9,"tcModel"],[16,31,5,16],[16,35,5,21,"tcModel"],[16,42,5,28],[16,44,6,8],[16,45,6,9,"tcModel"],[16,52,6,16],[16,54,6,18,"gvl"],[16,57,6,21],[16,62,6,26],[17,6,7,12],[18,0,8,0],[19,0,9,0],[20,0,10,0],[21,6,11,12,"tcModel"],[21,13,11,19],[21,14,11,20,"publisherRestrictions"],[21,35,11,41],[21,36,11,42,"gvl"],[21,39,11,45],[21,42,11,48,"gvl"],[21,45,11,51],[22,6,12,12],[23,0,13,0],[24,0,14,0],[25,6,15,12,"tcModel"],[25,13,15,19],[25,14,15,20,"purposeLegitimateInterests"],[25,40,15,46],[25,41,15,47,"unset"],[25,46,15,52],[25,47,15,53],[25,48,15,54],[25,49,15,55],[26,6,16,12],[27,0,17,0],[28,0,18,0],[29,0,19,0],[30,0,20,0],[31,6,21,12],[31,12,21,18,"vectorToIntMap"],[31,26,21,32],[31,29,21,35],[31,33,21,39,"Map"],[31,36,21,42],[31,37,21,43],[31,38,21,44],[32,6,22,12,"vectorToIntMap"],[32,20,22,26],[32,21,22,27,"set"],[32,24,22,30],[32,25,22,31],[32,41,22,47],[32,43,22,49,"tcModel"],[32,50,22,56],[32,51,22,57,"vendorLegitimateInterests"],[32,76,22,82],[32,77,22,83],[33,6,23,12,"vectorToIntMap"],[33,20,23,26],[33,21,23,27,"set"],[33,24,23,30],[33,25,23,31],[33,35,23,41],[33,37,23,43,"tcModel"],[33,44,23,50],[33,45,23,51,"vendorConsents"],[33,59,23,65],[33,60,23,66],[34,6,24,12,"vectorToIntMap"],[34,20,24,26],[34,21,24,27,"forEach"],[34,28,24,34],[34,29,24,35],[34,30,24,36,"vector"],[34,36,24,42],[34,38,24,44,"gvlVendorKey"],[34,50,24,56],[34,55,24,61],[35,8,25,16,"vector"],[35,14,25,22],[35,15,25,23,"forEach"],[35,22,25,30],[35,23,25,31],[35,24,25,32,"value"],[35,29,25,37],[35,31,25,39,"vendorId"],[35,39,25,47],[35,44,25,52],[36,10,26,20],[36,14,26,24,"value"],[36,19,26,29],[36,21,26,31],[37,12,27,24],[37,18,27,30,"vendor"],[37,24,27,36],[37,27,27,39,"gvl"],[37,30,27,42],[37,31,27,43,"vendors"],[37,38,27,50],[37,39,27,51,"vendorId"],[37,47,27,59],[37,48,27,60],[38,12,28,24],[38,16,28,28],[38,17,28,29,"vendor"],[38,23,28,35],[38,27,28,39,"vendor"],[38,33,28,45],[38,34,28,46,"deletedDate"],[38,45,28,57],[38,47,28,59],[39,14,29,28],[40,0,30,0],[41,0,31,0],[42,0,32,0],[43,14,33,28,"vector"],[43,20,33,34],[43,21,33,35,"unset"],[43,26,33,40],[43,27,33,41,"vendorId"],[43,35,33,49],[43,36,33,50],[44,12,34,24],[44,13,34,25],[44,19,35,29],[44,23,35,33,"vendor"],[44,29,35,39],[44,30,35,40,"gvlVendorKey"],[44,42,35,52],[44,43,35,53],[44,44,35,54,"length"],[44,50,35,60],[44,55,35,65],[44,56,35,66],[44,58,35,68],[45,14,36,28],[45,18,36,32,"gvlVendorKey"],[45,30,36,44],[45,35,36,49],[45,51,36,65],[45,55,36,69,"vendor"],[45,61,36,75],[45,62,36,76],[45,72,36,86],[45,73,36,87],[45,74,36,88,"length"],[45,80,36,94],[45,85,36,99],[45,86,36,100],[45,90,36,104,"vendor"],[45,96,36,110],[45,97,36,111],[45,113,36,127],[45,114,36,128],[45,115,36,129,"length"],[45,121,36,135],[45,126,36,140],[45,127,36,141],[45,131,36,145,"vendor"],[45,137,36,151],[45,138,36,152],[45,155,36,169],[45,156,36,170],[45,157,36,171,"length"],[45,163,36,177],[45,166,36,180],[45,167,36,181],[45,169,36,183],[46,16,37,32],[47,0,38,0],[48,0,39,0],[49,0,40,0],[50,0,41,0],[51,14,37,32],[51,15,42,29],[51,21,43,33],[52,16,44,32],[53,0,45,0],[54,0,46,0],[55,0,47,0],[56,0,48,0],[57,16,49,32],[57,20,49,36,"tcModel"],[57,27,49,43],[57,28,49,44,"isServiceSpecific"],[57,45,49,61],[57,47,49,63],[58,18,50,36],[58,22,50,40,"vendor"],[58,28,50,46],[58,29,50,47,"flexiblePurposes"],[58,45,50,63],[58,46,50,64,"length"],[58,52,50,70],[58,57,50,75],[58,58,50,76],[58,60,50,78],[59,20,51,40],[60,0,52,0],[61,0,53,0],[62,0,54,0],[63,20,55,40,"vector"],[63,26,55,46],[63,27,55,47,"unset"],[63,32,55,52],[63,33,55,53,"vendorId"],[63,41,55,61],[63,42,55,62],[64,18,56,36],[64,19,56,37],[64,25,57,41],[65,20,58,40],[66,0,59,0],[67,0,60,0],[68,0,61,0],[69,0,62,0],[70,20,63,40],[70,26,63,46,"restrictions"],[70,38,63,58],[70,41,63,61,"tcModel"],[70,48,63,68],[70,49,63,69,"publisherRestrictions"],[70,70,63,90],[70,71,63,91,"getRestrictions"],[70,86,63,106],[70,87,63,107,"vendorId"],[70,95,63,115],[70,96,63,116],[71,20,64,40],[71,24,64,44,"isValid"],[71,31,64,51],[71,34,64,54],[71,39,64,59],[72,20,65,40],[72,25,65,45],[72,29,65,49,"i"],[72,30,65,50],[72,33,65,53],[72,34,65,54],[72,36,65,56,"len"],[72,39,65,59],[72,42,65,62,"restrictions"],[72,54,65,74],[72,55,65,75,"length"],[72,61,65,81],[72,63,65,83,"i"],[72,64,65,84],[72,67,65,87,"len"],[72,70,65,90],[72,74,65,94],[72,75,65,95,"isValid"],[72,82,65,102],[72,84,65,104,"i"],[72,85,65,105],[72,87,65,107],[72,89,65,109],[73,22,66,44],[74,0,67,0],[75,0,68,0],[76,0,69,0],[77,0,70,0],[78,0,71,0],[79,0,72,0],[80,0,73,0],[81,22,74,44,"isValid"],[81,29,74,51],[81,32,74,56,"restrictions"],[81,44,74,68],[81,45,74,69,"i"],[81,46,74,70],[81,47,74,71],[81,48,74,72,"restrictionType"],[81,63,74,87],[81,68,74,92,"RestrictionType"],[81,81,74,107],[81,82,74,107,"RestrictionType"],[81,97,74,107],[81,98,74,108,"REQUIRE_CONSENT"],[81,113,74,123],[81,117,75,48,"gvlVendorKey"],[81,129,75,60],[81,134,75,65],[81,144,75,75],[81,148,76,49,"restrictions"],[81,160,76,61],[81,161,76,62,"i"],[81,162,76,63],[81,163,76,64],[81,164,76,65,"restrictionType"],[81,179,76,80],[81,184,76,85,"RestrictionType"],[81,197,76,100],[81,198,76,100,"RestrictionType"],[81,213,76,100],[81,214,76,101,"REQUIRE_LI"],[81,224,76,111],[81,228,77,52,"gvlVendorKey"],[81,240,77,64],[81,245,77,69],[81,261,77,87],[82,20,78,40],[83,20,79,40],[83,24,79,44],[83,25,79,45,"isValid"],[83,32,79,52],[83,34,79,54],[84,22,80,44],[85,0,81,0],[86,0,82,0],[87,0,83,0],[88,0,84,0],[89,0,85,0],[90,22,86,44,"vector"],[90,28,86,50],[90,29,86,51,"unset"],[90,34,86,56],[90,35,86,57,"vendorId"],[90,43,86,65],[90,44,86,66],[91,20,87,40],[92,18,88,36],[93,16,89,32],[93,17,89,33],[93,23,90,37],[94,18,91,36],[95,0,92,0],[96,0,93,0],[97,0,94,0],[98,0,95,0],[99,18,96,36,"vector"],[99,24,96,42],[99,25,96,43,"unset"],[99,30,96,48],[99,31,96,49,"vendorId"],[99,39,96,57],[99,40,96,58],[100,16,97,32],[101,14,98,28],[102,12,99,24],[103,10,100,20],[104,8,101,16],[104,9,101,17],[104,10,101,18],[105,6,102,12],[105,7,102,13],[105,8,102,14],[106,6,103,12,"tcModel"],[106,13,103,19],[106,14,103,20,"vendorsDisclosed"],[106,30,103,36],[106,31,103,37,"set"],[106,34,103,40],[106,35,103,41,"gvl"],[106,38,103,44],[106,39,103,45,"vendors"],[106,46,103,52],[106,47,103,53],[107,6,104,12],[107,13,104,19,"tcModel"],[107,20,104,26],[108,4,105,8],[108,5,105,9],[108,6,106,5],[109,4,107,4],[109,11,107,11,"process"],[109,18,107,18,"process"],[109,19,107,19,"tcModel"],[109,26,107,26],[109,28,107,28,"options"],[109,35,107,35],[109,37,107,37],[110,6,108,8],[110,12,108,14,"gvl"],[110,15,108,17],[110,18,108,20,"tcModel"],[110,25,108,27],[110,26,108,28,"gvl"],[110,29,108,31],[111,6,109,8],[111,10,109,12],[111,11,109,13,"gvl"],[111,14,109,16],[111,16,109,18],[112,8,110,12],[112,14,110,18],[112,18,110,22,"EncodingError"],[112,32,110,35],[112,33,110,35,"EncodingError"],[112,46,110,35],[112,47,110,36],[112,87,110,76],[112,88,110,77],[113,6,111,8],[114,6,112,8],[114,10,112,12],[114,11,112,13,"gvl"],[114,14,112,16],[114,15,112,17,"isReady"],[114,22,112,24],[114,24,112,26],[115,8,113,12],[115,14,113,18],[115,18,113,22,"EncodingError"],[115,32,113,35],[115,33,113,35,"EncodingError"],[115,46,113,35],[115,47,113,36],[115,114,113,103],[115,115,113,104],[116,6,114,8],[117,6,115,8,"tcModel"],[117,13,115,15],[117,16,115,18,"tcModel"],[117,23,115,25],[117,24,115,26,"clone"],[117,29,115,31],[117,30,115,32],[117,31,115,33],[118,6,116,8,"tcModel"],[118,13,116,15],[118,14,116,16,"consentLanguage"],[118,29,116,31],[118,32,116,34,"gvl"],[118,35,116,37],[118,36,116,38,"language"],[118,44,116,46],[118,45,116,47,"toUpperCase"],[118,56,116,58],[118,57,116,59],[118,58,116,60],[119,6,117,8],[119,10,117,12,"options"],[119,17,117,19],[119,19,117,21,"version"],[119,26,117,28],[119,29,117,31],[119,30,117,32],[119,34,117,36,"options"],[119,41,117,43],[119,43,117,45,"version"],[119,50,117,52],[119,54,117,56],[119,58,117,60],[119,59,117,61,"processor"],[119,68,117,70],[119,69,117,71,"length"],[119,75,117,77],[119,77,117,79],[120,8,118,12,"tcModel"],[120,15,118,19],[120,16,118,20,"version"],[120,23,118,27],[120,26,118,30,"options"],[120,33,118,37],[120,34,118,38,"version"],[120,41,118,45],[121,6,119,8],[121,7,119,9],[121,13,120,13],[122,8,121,12],[123,0,122,0],[124,0,123,0],[125,8,124,12,"tcModel"],[125,15,124,19],[125,16,124,20,"version"],[125,23,124,27],[125,26,124,30],[125,30,124,34],[125,31,124,35,"processor"],[125,40,124,44],[125,41,124,45,"length"],[125,47,124,51],[126,6,125,8],[127,6,126,8],[127,12,126,14,"processorFunctionIndex"],[127,34,126,36],[127,37,126,39,"tcModel"],[127,44,126,46],[127,45,126,47,"version"],[127,52,126,54],[127,55,126,57],[127,56,126,58],[128,6,127,8],[128,10,127,12],[128,11,127,13],[128,15,127,17],[128,16,127,18,"processor"],[128,25,127,27],[128,26,127,28,"processorFunctionIndex"],[128,48,127,50],[128,49,127,51],[128,51,127,53],[129,8,128,12],[129,14,128,18],[129,18,128,22,"EncodingError"],[129,32,128,35],[129,33,128,35,"EncodingError"],[129,46,128,35],[129,47,128,36],[129,67,128,56,"tcModel"],[129,74,128,63],[129,75,128,64,"version"],[129,82,128,71],[129,84,128,73],[129,85,128,74],[130,6,129,8],[131,6,130,8],[131,13,130,15],[131,17,130,19],[131,18,130,20,"processor"],[131,27,130,29],[131,28,130,30,"processorFunctionIndex"],[131,50,130,52],[131,51,130,53],[131,52,130,54,"tcModel"],[131,59,130,61],[131,61,130,63,"gvl"],[131,64,130,66],[131,65,130,67],[132,4,131,4],[133,2,132,0],[134,0,132,1],[134,3]],"functionMap":{"names":["<global>","SemanticPreEncoder","<anonymous>","vectorToIntMap.forEach$argument_0","vector.forEach$argument_0","process"],"mappings":"AAA;OCE;QCE,oBD;QCC;mCCkB;+BCC;iBD4E;aDC;SDG;IIE;KJwB;CDC"},"hasCjsExports":false},"type":"js/module"}]}