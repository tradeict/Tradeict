{"dependencies":[{"name":"./IntEncoder.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":46,"index":46}}],"key":"yU5HftgQ+HW+Cj5EoqioxXCPi1U=","exportNames":["*"],"imports":1}},{"name":"../../errors/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":47},"end":{"line":2,"column":70,"index":117}}],"key":"qHglNs3UH2C2wT8WJZubASIXHQ0=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"LangEncoder\", {\n    enumerable: true,\n    get: function () {\n      return LangEncoder;\n    }\n  });\n  var _IntEncoderJs = require(_dependencyMap[0], \"./IntEncoder.js\");\n  var _errorsIndexJs = require(_dependencyMap[1], \"../../errors/index.js\");\n  class LangEncoder {\n    static encode(value, numBits) {\n      value = value.toUpperCase();\n      const ASCII_START = 65;\n      const firstLetter = value.charCodeAt(0) - ASCII_START;\n      const secondLetter = value.charCodeAt(1) - ASCII_START;\n      // check some things to throw some good errors\n      if (firstLetter < 0 || firstLetter > 25 || secondLetter < 0 || secondLetter > 25) {\n        throw new _errorsIndexJs.EncodingError(`invalid language code: ${value}`);\n      }\n      if (numBits % 2 === 1) {\n        throw new _errorsIndexJs.EncodingError(`numBits must be even, ${numBits} is not valid`);\n      }\n      numBits = numBits / 2;\n      const firstLetterBString = _IntEncoderJs.IntEncoder.encode(firstLetter, numBits);\n      const secondLetterBString = _IntEncoderJs.IntEncoder.encode(secondLetter, numBits);\n      return firstLetterBString + secondLetterBString;\n    }\n    static decode(value, numBits) {\n      let retr;\n      // is it an even number of bits? we have to divide it\n      if (numBits === value.length && !(value.length % 2)) {\n        const ASCII_START = 65;\n        const mid = value.length / 2;\n        const firstLetter = _IntEncoderJs.IntEncoder.decode(value.slice(0, mid), mid) + ASCII_START;\n        const secondLetter = _IntEncoderJs.IntEncoder.decode(value.slice(mid), mid) + ASCII_START;\n        retr = String.fromCharCode(firstLetter) + String.fromCharCode(secondLetter);\n      } else {\n        throw new _errorsIndexJs.DecodingError('invalid bit length for language');\n      }\n      return retr;\n    }\n  }\n});","lineCount":48,"map":[[7,2,3,0,"Object"],[7,8,3,0],[7,9,3,0,"defineProperty"],[7,23,3,0],[7,24,3,0,"exports"],[7,31,3,0],[8,4,3,0,"enumerable"],[8,14,3,0],[9,4,3,0,"get"],[9,7,3,0],[9,18,3,0,"get"],[9,19,3,0],[10,6,3,0],[10,13,3,0,"LangEncoder"],[10,24,3,0],[11,4,3,0],[12,2,3,0],[13,2,1,0],[13,6,1,0,"_IntEncoderJs"],[13,19,1,0],[13,22,1,0,"require"],[13,29,1,0],[13,30,1,0,"_dependencyMap"],[13,44,1,0],[14,2,2,0],[14,6,2,0,"_errorsIndexJs"],[14,20,2,0],[14,23,2,0,"require"],[14,30,2,0],[14,31,2,0,"_dependencyMap"],[14,45,2,0],[15,2,3,7],[15,8,3,13,"LangEncoder"],[15,19,3,24],[15,20,3,25],[16,4,4,4],[16,11,4,11,"encode"],[16,17,4,17,"encode"],[16,18,4,18,"value"],[16,23,4,23],[16,25,4,25,"numBits"],[16,32,4,32],[16,34,4,34],[17,6,5,8,"value"],[17,11,5,13],[17,14,5,16,"value"],[17,19,5,21],[17,20,5,22,"toUpperCase"],[17,31,5,33],[17,32,5,34],[17,33,5,35],[18,6,6,8],[18,12,6,14,"ASCII_START"],[18,23,6,25],[18,26,6,28],[18,28,6,30],[19,6,7,8],[19,12,7,14,"firstLetter"],[19,23,7,25],[19,26,7,28,"value"],[19,31,7,33],[19,32,7,34,"charCodeAt"],[19,42,7,44],[19,43,7,45],[19,44,7,46],[19,45,7,47],[19,48,7,50,"ASCII_START"],[19,59,7,61],[20,6,8,8],[20,12,8,14,"secondLetter"],[20,24,8,26],[20,27,8,29,"value"],[20,32,8,34],[20,33,8,35,"charCodeAt"],[20,43,8,45],[20,44,8,46],[20,45,8,47],[20,46,8,48],[20,49,8,51,"ASCII_START"],[20,60,8,62],[21,6,9,8],[22,6,10,8],[22,10,10,12,"firstLetter"],[22,21,10,23],[22,24,10,26],[22,25,10,27],[22,29,10,31,"firstLetter"],[22,40,10,42],[22,43,10,45],[22,45,10,47],[22,49,10,51,"secondLetter"],[22,61,10,63],[22,64,10,66],[22,65,10,67],[22,69,10,71,"secondLetter"],[22,81,10,83],[22,84,10,86],[22,86,10,88],[22,88,10,90],[23,8,11,12],[23,14,11,18],[23,18,11,22,"EncodingError"],[23,32,11,35],[23,33,11,35,"EncodingError"],[23,46,11,35],[23,47,11,36],[23,73,11,62,"value"],[23,78,11,67],[23,80,11,69],[23,81,11,70],[24,6,12,8],[25,6,13,8],[25,10,13,12,"numBits"],[25,17,13,19],[25,20,13,22],[25,21,13,23],[25,26,13,28],[25,27,13,29],[25,29,13,31],[26,8,14,12],[26,14,14,18],[26,18,14,22,"EncodingError"],[26,32,14,35],[26,33,14,35,"EncodingError"],[26,46,14,35],[26,47,14,36],[26,72,14,61,"numBits"],[26,79,14,68],[26,94,14,83],[26,95,14,84],[27,6,15,8],[28,6,16,8,"numBits"],[28,13,16,15],[28,16,16,18,"numBits"],[28,23,16,25],[28,26,16,28],[28,27,16,29],[29,6,17,8],[29,12,17,14,"firstLetterBString"],[29,30,17,32],[29,33,17,35,"IntEncoder"],[29,46,17,45],[29,47,17,45,"IntEncoder"],[29,57,17,45],[29,58,17,46,"encode"],[29,64,17,52],[29,65,17,53,"firstLetter"],[29,76,17,64],[29,78,17,66,"numBits"],[29,85,17,73],[29,86,17,74],[30,6,18,8],[30,12,18,14,"secondLetterBString"],[30,31,18,33],[30,34,18,36,"IntEncoder"],[30,47,18,46],[30,48,18,46,"IntEncoder"],[30,58,18,46],[30,59,18,47,"encode"],[30,65,18,53],[30,66,18,54,"secondLetter"],[30,78,18,66],[30,80,18,68,"numBits"],[30,87,18,75],[30,88,18,76],[31,6,19,8],[31,13,19,15,"firstLetterBString"],[31,31,19,33],[31,34,19,36,"secondLetterBString"],[31,53,19,55],[32,4,20,4],[33,4,21,4],[33,11,21,11,"decode"],[33,17,21,17,"decode"],[33,18,21,18,"value"],[33,23,21,23],[33,25,21,25,"numBits"],[33,32,21,32],[33,34,21,34],[34,6,22,8],[34,10,22,12,"retr"],[34,14,22,16],[35,6,23,8],[36,6,24,8],[36,10,24,12,"numBits"],[36,17,24,19],[36,22,24,24,"value"],[36,27,24,29],[36,28,24,30,"length"],[36,34,24,36],[36,38,24,40],[36,40,24,42,"value"],[36,45,24,47],[36,46,24,48,"length"],[36,52,24,54],[36,55,24,57],[36,56,24,58],[36,57,24,59],[36,59,24,61],[37,8,25,12],[37,14,25,18,"ASCII_START"],[37,25,25,29],[37,28,25,32],[37,30,25,34],[38,8,26,12],[38,14,26,18,"mid"],[38,17,26,21],[38,20,26,24,"value"],[38,25,26,29],[38,26,26,30,"length"],[38,32,26,36],[38,35,26,39],[38,36,26,40],[39,8,27,12],[39,14,27,18,"firstLetter"],[39,25,27,29],[39,28,27,32,"IntEncoder"],[39,41,27,42],[39,42,27,42,"IntEncoder"],[39,52,27,42],[39,53,27,43,"decode"],[39,59,27,49],[39,60,27,50,"value"],[39,65,27,55],[39,66,27,56,"slice"],[39,71,27,61],[39,72,27,62],[39,73,27,63],[39,75,27,65,"mid"],[39,78,27,68],[39,79,27,69],[39,81,27,71,"mid"],[39,84,27,74],[39,85,27,75],[39,88,27,78,"ASCII_START"],[39,99,27,89],[40,8,28,12],[40,14,28,18,"secondLetter"],[40,26,28,30],[40,29,28,33,"IntEncoder"],[40,42,28,43],[40,43,28,43,"IntEncoder"],[40,53,28,43],[40,54,28,44,"decode"],[40,60,28,50],[40,61,28,51,"value"],[40,66,28,56],[40,67,28,57,"slice"],[40,72,28,62],[40,73,28,63,"mid"],[40,76,28,66],[40,77,28,67],[40,79,28,69,"mid"],[40,82,28,72],[40,83,28,73],[40,86,28,76,"ASCII_START"],[40,97,28,87],[41,8,29,12,"retr"],[41,12,29,16],[41,15,29,19,"String"],[41,21,29,25],[41,22,29,26,"fromCharCode"],[41,34,29,38],[41,35,29,39,"firstLetter"],[41,46,29,50],[41,47,29,51],[41,50,29,54,"String"],[41,56,29,60],[41,57,29,61,"fromCharCode"],[41,69,29,73],[41,70,29,74,"secondLetter"],[41,82,29,86],[41,83,29,87],[42,6,30,8],[42,7,30,9],[42,13,31,13],[43,8,32,12],[43,14,32,18],[43,18,32,22,"DecodingError"],[43,32,32,35],[43,33,32,35,"DecodingError"],[43,46,32,35],[43,47,32,36],[43,80,32,69],[43,81,32,70],[44,6,33,8],[45,6,34,8],[45,13,34,15,"retr"],[45,17,34,19],[46,4,35,4],[47,2,36,0],[48,0,36,1],[48,3]],"functionMap":{"names":["<global>","LangEncoder","encode","decode"],"mappings":"AAA;OCE;ICC;KDgB;IEC;KFc;CDC"},"hasCjsExports":false},"type":"js/module"}]}