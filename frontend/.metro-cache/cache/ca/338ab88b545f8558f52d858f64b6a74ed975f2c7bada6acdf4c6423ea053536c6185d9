{"dependencies":[{"name":"./Base64Url.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":43,"index":43}}],"key":"/wffQY0nS+ARLcLSLdlT7VoRJLI=","exportNames":["*"],"imports":1}},{"name":"./BitLength.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":44},"end":{"line":2,"column":43,"index":87}}],"key":"5xmtJtpg0dRopT06QNauSACXUpU=","exportNames":["*"],"imports":1}},{"name":"./field/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":88},"end":{"line":3,"column":84,"index":172}}],"key":"OgqlY9EIISkcj5z5VyWIgLRFhvY=","exportNames":["*"],"imports":1}},{"name":"./sequence/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":173},"end":{"line":4,"column":52,"index":225}}],"key":"WIBohOStxRXxg4Nw04DOd2cxexY=","exportNames":["*"],"imports":1}},{"name":"../errors/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":226},"end":{"line":5,"column":66,"index":292}}],"key":"rg9G2hGSxUlgvvl94nwST8IJkQ8=","exportNames":["*"],"imports":1}},{"name":"../model/Fields.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":293},"end":{"line":6,"column":44,"index":337}}],"key":"RXzlIqGT8pN20tzTd7Blbgy1jUg=","exportNames":["*"],"imports":1}},{"name":"../model/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":338},"end":{"line":7,"column":56,"index":394}}],"key":"CtBebnGS/4nZdZlVrl5RR9qrROU=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"SegmentEncoder\", {\n    enumerable: true,\n    get: function () {\n      return SegmentEncoder;\n    }\n  });\n  var _Base64UrlJs = require(_dependencyMap[0], \"./Base64Url.js\");\n  var _BitLengthJs = require(_dependencyMap[1], \"./BitLength.js\");\n  var _fieldIndexJs = require(_dependencyMap[2], \"./field/index.js\");\n  var _sequenceIndexJs = require(_dependencyMap[3], \"./sequence/index.js\");\n  var _errorsIndexJs = require(_dependencyMap[4], \"../errors/index.js\");\n  var _modelFieldsJs = require(_dependencyMap[5], \"../model/Fields.js\");\n  var _modelIndexJs = require(_dependencyMap[6], \"../model/index.js\");\n  class SegmentEncoder {\n    static fieldSequence = new _sequenceIndexJs.FieldSequence();\n    static encode(tcModel, segment) {\n      let sequence;\n      try {\n        sequence = this.fieldSequence[String(tcModel.version)][segment];\n      } catch (err) {\n        throw new _errorsIndexJs.EncodingError(`Unable to encode version: ${tcModel.version}, segment: ${segment}`);\n      }\n      let bitField = '';\n      /**\n       * If this is anything other than the core segment we have a \"segment id\"\n       * to append to the front of the string\n       */\n      if (segment !== _modelIndexJs.Segment.CORE) {\n        bitField = _fieldIndexJs.IntEncoder.encode(_modelIndexJs.SegmentIDs.KEY_TO_ID[segment], _BitLengthJs.BitLength.segmentType);\n      }\n      const fieldEncoderMap = (0, _fieldIndexJs.FieldEncoderMap)();\n      sequence.forEach(key => {\n        const value = tcModel[key];\n        const encoder = fieldEncoderMap[key];\n        let numBits = _BitLengthJs.BitLength[key];\n        if (numBits === undefined) {\n          if (this.isPublisherCustom(key)) {\n            /**\n             * publisherCustom[Consents | LegitimateInterests] are an edge case\n             * because they are of variable length. The length is defined in a\n             * separate field named numCustomPurposes.\n             */\n            numBits = Number(tcModel[_modelFieldsJs.Fields.numCustomPurposes]);\n          }\n        }\n        try {\n          bitField += encoder.encode(value, numBits);\n        } catch (err) {\n          throw new _errorsIndexJs.EncodingError(`Error encoding ${segment}->${key}: ${err.message}`);\n        }\n      });\n      // base64url encode the string and return\n      return _Base64UrlJs.Base64Url.encode(bitField);\n    }\n    static decode(encodedString, tcModel, segment) {\n      const bitField = _Base64UrlJs.Base64Url.decode(encodedString);\n      let bStringIdx = 0;\n      if (segment === _modelIndexJs.Segment.CORE) {\n        tcModel.version = _fieldIndexJs.IntEncoder.decode(bitField.substr(bStringIdx, _BitLengthJs.BitLength[_modelFieldsJs.Fields.version]), _BitLengthJs.BitLength[_modelFieldsJs.Fields.version]);\n      }\n      if (segment !== _modelIndexJs.Segment.CORE) {\n        bStringIdx += _BitLengthJs.BitLength.segmentType;\n      }\n      const sequence = this.fieldSequence[String(tcModel.version)][segment];\n      const fieldEncoderMap = (0, _fieldIndexJs.FieldEncoderMap)();\n      sequence.forEach(key => {\n        const encoder = fieldEncoderMap[key];\n        let numBits = _BitLengthJs.BitLength[key];\n        if (numBits === undefined) {\n          if (this.isPublisherCustom(key)) {\n            /**\n             * publisherCustom[Consents | LegitimateInterests] are an edge case\n             * because they are of variable length. The length is defined in a\n             * separate field named numCustomPurposes.\n             */\n            numBits = Number(tcModel[_modelFieldsJs.Fields.numCustomPurposes]);\n          }\n        }\n        if (numBits !== 0) {\n          /**\n           * numBits could be 0 if this is a publisher custom purposes field and\n           * no custom purposes are defined. If that is the case, we don't need\n           * to gather no bits and we don't need to increment our bStringIdx\n           * pointer because those would all be 0 increments and would mess up\n           * the next logical if statement.\n           */\n          const bits = bitField.substr(bStringIdx, numBits);\n          if (encoder === _fieldIndexJs.VendorVectorEncoder) {\n            tcModel[key] = encoder.decode(bits, tcModel.version);\n          } else {\n            tcModel[key] = encoder.decode(bits, numBits);\n          }\n          if (Number.isInteger(numBits)) {\n            bStringIdx += numBits;\n          } else if (Number.isInteger(tcModel[key].bitLength)) {\n            bStringIdx += tcModel[key].bitLength;\n          } else {\n            throw new _errorsIndexJs.DecodingError(key);\n          }\n        }\n      });\n      return tcModel;\n    }\n    static isPublisherCustom(key) {\n      return key.indexOf('publisherCustom') === 0;\n    }\n  }\n});","lineCount":114,"map":[[7,2,8,0,"Object"],[7,8,8,0],[7,9,8,0,"defineProperty"],[7,23,8,0],[7,24,8,0,"exports"],[7,31,8,0],[8,4,8,0,"enumerable"],[8,14,8,0],[9,4,8,0,"get"],[9,7,8,0],[9,18,8,0,"get"],[9,19,8,0],[10,6,8,0],[10,13,8,0,"SegmentEncoder"],[10,27,8,0],[11,4,8,0],[12,2,8,0],[13,2,1,0],[13,6,1,0,"_Base64UrlJs"],[13,18,1,0],[13,21,1,0,"require"],[13,28,1,0],[13,29,1,0,"_dependencyMap"],[13,43,1,0],[14,2,2,0],[14,6,2,0,"_BitLengthJs"],[14,18,2,0],[14,21,2,0,"require"],[14,28,2,0],[14,29,2,0,"_dependencyMap"],[14,43,2,0],[15,2,3,0],[15,6,3,0,"_fieldIndexJs"],[15,19,3,0],[15,22,3,0,"require"],[15,29,3,0],[15,30,3,0,"_dependencyMap"],[15,44,3,0],[16,2,4,0],[16,6,4,0,"_sequenceIndexJs"],[16,22,4,0],[16,25,4,0,"require"],[16,32,4,0],[16,33,4,0,"_dependencyMap"],[16,47,4,0],[17,2,5,0],[17,6,5,0,"_errorsIndexJs"],[17,20,5,0],[17,23,5,0,"require"],[17,30,5,0],[17,31,5,0,"_dependencyMap"],[17,45,5,0],[18,2,6,0],[18,6,6,0,"_modelFieldsJs"],[18,20,6,0],[18,23,6,0,"require"],[18,30,6,0],[18,31,6,0,"_dependencyMap"],[18,45,6,0],[19,2,7,0],[19,6,7,0,"_modelIndexJs"],[19,19,7,0],[19,22,7,0,"require"],[19,29,7,0],[19,30,7,0,"_dependencyMap"],[19,44,7,0],[20,2,8,7],[20,8,8,13,"SegmentEncoder"],[20,22,8,27],[20,23,8,28],[21,4,9,4],[21,11,9,11,"fieldSequence"],[21,24,9,24],[21,27,9,27],[21,31,9,31,"FieldSequence"],[21,47,9,44],[21,48,9,44,"FieldSequence"],[21,61,9,44],[21,62,9,45],[21,63,9,46],[22,4,10,4],[22,11,10,11,"encode"],[22,17,10,17,"encode"],[22,18,10,18,"tcModel"],[22,25,10,25],[22,27,10,27,"segment"],[22,34,10,34],[22,36,10,36],[23,6,11,8],[23,10,11,12,"sequence"],[23,18,11,20],[24,6,12,8],[24,10,12,12],[25,8,13,12,"sequence"],[25,16,13,20],[25,19,13,23],[25,23,13,27],[25,24,13,28,"fieldSequence"],[25,37,13,41],[25,38,13,42,"String"],[25,44,13,48],[25,45,13,49,"tcModel"],[25,52,13,56],[25,53,13,57,"version"],[25,60,13,64],[25,61,13,65],[25,62,13,66],[25,63,13,67,"segment"],[25,70,13,74],[25,71,13,75],[26,6,14,8],[26,7,14,9],[26,8,15,8],[26,15,15,15,"err"],[26,18,15,18],[26,20,15,20],[27,8,16,12],[27,14,16,18],[27,18,16,22,"EncodingError"],[27,32,16,35],[27,33,16,35,"EncodingError"],[27,46,16,35],[27,47,16,36],[27,76,16,65,"tcModel"],[27,83,16,72],[27,84,16,73,"version"],[27,91,16,80],[27,105,16,94,"segment"],[27,112,16,101],[27,114,16,103],[27,115,16,104],[28,6,17,8],[29,6,18,8],[29,10,18,12,"bitField"],[29,18,18,20],[29,21,18,23],[29,23,18,25],[30,6,19,8],[31,0,20,0],[32,0,21,0],[33,0,22,0],[34,6,23,8],[34,10,23,12,"segment"],[34,17,23,19],[34,22,23,24,"Segment"],[34,35,23,31],[34,36,23,31,"Segment"],[34,43,23,31],[34,44,23,32,"CORE"],[34,48,23,36],[34,50,23,38],[35,8,24,12,"bitField"],[35,16,24,20],[35,19,24,23,"IntEncoder"],[35,32,24,33],[35,33,24,33,"IntEncoder"],[35,43,24,33],[35,44,24,34,"encode"],[35,50,24,40],[35,51,24,41,"SegmentIDs"],[35,64,24,51],[35,65,24,51,"SegmentIDs"],[35,75,24,51],[35,76,24,52,"KEY_TO_ID"],[35,85,24,61],[35,86,24,62,"segment"],[35,93,24,69],[35,94,24,70],[35,96,24,72,"BitLength"],[35,108,24,81],[35,109,24,81,"BitLength"],[35,118,24,81],[35,119,24,82,"segmentType"],[35,130,24,93],[35,131,24,94],[36,6,25,8],[37,6,26,8],[37,12,26,14,"fieldEncoderMap"],[37,27,26,29],[37,30,26,32],[37,34,26,32,"FieldEncoderMap"],[37,47,26,47],[37,48,26,47,"FieldEncoderMap"],[37,63,26,47],[37,65,26,48],[37,66,26,49],[38,6,27,8,"sequence"],[38,14,27,16],[38,15,27,17,"forEach"],[38,22,27,24],[38,23,27,26,"key"],[38,26,27,29],[38,30,27,34],[39,8,28,12],[39,14,28,18,"value"],[39,19,28,23],[39,22,28,26,"tcModel"],[39,29,28,33],[39,30,28,34,"key"],[39,33,28,37],[39,34,28,38],[40,8,29,12],[40,14,29,18,"encoder"],[40,21,29,25],[40,24,29,28,"fieldEncoderMap"],[40,39,29,43],[40,40,29,44,"key"],[40,43,29,47],[40,44,29,48],[41,8,30,12],[41,12,30,16,"numBits"],[41,19,30,23],[41,22,30,26,"BitLength"],[41,34,30,35],[41,35,30,35,"BitLength"],[41,44,30,35],[41,45,30,36,"key"],[41,48,30,39],[41,49,30,40],[42,8,31,12],[42,12,31,16,"numBits"],[42,19,31,23],[42,24,31,28,"undefined"],[42,33,31,37],[42,35,31,39],[43,10,32,16],[43,14,32,20],[43,18,32,24],[43,19,32,25,"isPublisherCustom"],[43,36,32,42],[43,37,32,43,"key"],[43,40,32,46],[43,41,32,47],[43,43,32,49],[44,12,33,20],[45,0,34,0],[46,0,35,0],[47,0,36,0],[48,0,37,0],[49,12,38,20,"numBits"],[49,19,38,27],[49,22,38,30,"Number"],[49,28,38,36],[49,29,38,37,"tcModel"],[49,36,38,44],[49,37,38,45,"Fields"],[49,51,38,51],[49,52,38,51,"Fields"],[49,58,38,51],[49,59,38,52,"numCustomPurposes"],[49,76,38,69],[49,77,38,70],[49,78,38,71],[50,10,39,16],[51,8,40,12],[52,8,41,12],[52,12,41,16],[53,10,42,16,"bitField"],[53,18,42,24],[53,22,42,28,"encoder"],[53,29,42,35],[53,30,42,36,"encode"],[53,36,42,42],[53,37,42,43,"value"],[53,42,42,48],[53,44,42,50,"numBits"],[53,51,42,57],[53,52,42,58],[54,8,43,12],[54,9,43,13],[54,10,44,12],[54,17,44,19,"err"],[54,20,44,22],[54,22,44,24],[55,10,45,16],[55,16,45,22],[55,20,45,26,"EncodingError"],[55,34,45,39],[55,35,45,39,"EncodingError"],[55,48,45,39],[55,49,45,40],[55,67,45,58,"segment"],[55,74,45,65],[55,79,45,70,"key"],[55,82,45,73],[55,87,45,78,"err"],[55,90,45,81],[55,91,45,82,"message"],[55,98,45,89],[55,100,45,91],[55,101,45,92],[56,8,46,12],[57,6,47,8],[57,7,47,9],[57,8,47,10],[58,6,48,8],[59,6,49,8],[59,13,49,15,"Base64Url"],[59,25,49,24],[59,26,49,24,"Base64Url"],[59,35,49,24],[59,36,49,25,"encode"],[59,42,49,31],[59,43,49,32,"bitField"],[59,51,49,40],[59,52,49,41],[60,4,50,4],[61,4,51,4],[61,11,51,11,"decode"],[61,17,51,17,"decode"],[61,18,51,18,"encodedString"],[61,31,51,31],[61,33,51,33,"tcModel"],[61,40,51,40],[61,42,51,42,"segment"],[61,49,51,49],[61,51,51,51],[62,6,52,8],[62,12,52,14,"bitField"],[62,20,52,22],[62,23,52,25,"Base64Url"],[62,35,52,34],[62,36,52,34,"Base64Url"],[62,45,52,34],[62,46,52,35,"decode"],[62,52,52,41],[62,53,52,42,"encodedString"],[62,66,52,55],[62,67,52,56],[63,6,53,8],[63,10,53,12,"bStringIdx"],[63,20,53,22],[63,23,53,25],[63,24,53,26],[64,6,54,8],[64,10,54,12,"segment"],[64,17,54,19],[64,22,54,24,"Segment"],[64,35,54,31],[64,36,54,31,"Segment"],[64,43,54,31],[64,44,54,32,"CORE"],[64,48,54,36],[64,50,54,38],[65,8,55,12,"tcModel"],[65,15,55,19],[65,16,55,20,"version"],[65,23,55,27],[65,26,55,30,"IntEncoder"],[65,39,55,40],[65,40,55,40,"IntEncoder"],[65,50,55,40],[65,51,55,41,"decode"],[65,57,55,47],[65,58,55,48,"bitField"],[65,66,55,56],[65,67,55,57,"substr"],[65,73,55,63],[65,74,55,64,"bStringIdx"],[65,84,55,74],[65,86,55,76,"BitLength"],[65,98,55,85],[65,99,55,85,"BitLength"],[65,108,55,85],[65,109,55,86,"Fields"],[65,123,55,92],[65,124,55,92,"Fields"],[65,130,55,92],[65,131,55,93,"version"],[65,138,55,100],[65,139,55,101],[65,140,55,102],[65,142,55,104,"BitLength"],[65,154,55,113],[65,155,55,113,"BitLength"],[65,164,55,113],[65,165,55,114,"Fields"],[65,179,55,120],[65,180,55,120,"Fields"],[65,186,55,120],[65,187,55,121,"version"],[65,194,55,128],[65,195,55,129],[65,196,55,130],[66,6,56,8],[67,6,57,8],[67,10,57,12,"segment"],[67,17,57,19],[67,22,57,24,"Segment"],[67,35,57,31],[67,36,57,31,"Segment"],[67,43,57,31],[67,44,57,32,"CORE"],[67,48,57,36],[67,50,57,38],[68,8,58,12,"bStringIdx"],[68,18,58,22],[68,22,58,26,"BitLength"],[68,34,58,35],[68,35,58,35,"BitLength"],[68,44,58,35],[68,45,58,36,"segmentType"],[68,56,58,47],[69,6,59,8],[70,6,60,8],[70,12,60,14,"sequence"],[70,20,60,22],[70,23,60,25],[70,27,60,29],[70,28,60,30,"fieldSequence"],[70,41,60,43],[70,42,60,44,"String"],[70,48,60,50],[70,49,60,51,"tcModel"],[70,56,60,58],[70,57,60,59,"version"],[70,64,60,66],[70,65,60,67],[70,66,60,68],[70,67,60,69,"segment"],[70,74,60,76],[70,75,60,77],[71,6,61,8],[71,12,61,14,"fieldEncoderMap"],[71,27,61,29],[71,30,61,32],[71,34,61,32,"FieldEncoderMap"],[71,47,61,47],[71,48,61,47,"FieldEncoderMap"],[71,63,61,47],[71,65,61,48],[71,66,61,49],[72,6,62,8,"sequence"],[72,14,62,16],[72,15,62,17,"forEach"],[72,22,62,24],[72,23,62,26,"key"],[72,26,62,29],[72,30,62,34],[73,8,63,12],[73,14,63,18,"encoder"],[73,21,63,25],[73,24,63,28,"fieldEncoderMap"],[73,39,63,43],[73,40,63,44,"key"],[73,43,63,47],[73,44,63,48],[74,8,64,12],[74,12,64,16,"numBits"],[74,19,64,23],[74,22,64,26,"BitLength"],[74,34,64,35],[74,35,64,35,"BitLength"],[74,44,64,35],[74,45,64,36,"key"],[74,48,64,39],[74,49,64,40],[75,8,65,12],[75,12,65,16,"numBits"],[75,19,65,23],[75,24,65,28,"undefined"],[75,33,65,37],[75,35,65,39],[76,10,66,16],[76,14,66,20],[76,18,66,24],[76,19,66,25,"isPublisherCustom"],[76,36,66,42],[76,37,66,43,"key"],[76,40,66,46],[76,41,66,47],[76,43,66,49],[77,12,67,20],[78,0,68,0],[79,0,69,0],[80,0,70,0],[81,0,71,0],[82,12,72,20,"numBits"],[82,19,72,27],[82,22,72,30,"Number"],[82,28,72,36],[82,29,72,37,"tcModel"],[82,36,72,44],[82,37,72,45,"Fields"],[82,51,72,51],[82,52,72,51,"Fields"],[82,58,72,51],[82,59,72,52,"numCustomPurposes"],[82,76,72,69],[82,77,72,70],[82,78,72,71],[83,10,73,16],[84,8,74,12],[85,8,75,12],[85,12,75,16,"numBits"],[85,19,75,23],[85,24,75,28],[85,25,75,29],[85,27,75,31],[86,10,76,16],[87,0,77,0],[88,0,78,0],[89,0,79,0],[90,0,80,0],[91,0,81,0],[92,0,82,0],[93,10,83,16],[93,16,83,22,"bits"],[93,20,83,26],[93,23,83,29,"bitField"],[93,31,83,37],[93,32,83,38,"substr"],[93,38,83,44],[93,39,83,45,"bStringIdx"],[93,49,83,55],[93,51,83,57,"numBits"],[93,58,83,64],[93,59,83,65],[94,10,84,16],[94,14,84,20,"encoder"],[94,21,84,27],[94,26,84,32,"VendorVectorEncoder"],[94,39,84,51],[94,40,84,51,"VendorVectorEncoder"],[94,59,84,51],[94,61,84,53],[95,12,85,20,"tcModel"],[95,19,85,27],[95,20,85,28,"key"],[95,23,85,31],[95,24,85,32],[95,27,85,35,"encoder"],[95,34,85,42],[95,35,85,43,"decode"],[95,41,85,49],[95,42,85,50,"bits"],[95,46,85,54],[95,48,85,56,"tcModel"],[95,55,85,63],[95,56,85,64,"version"],[95,63,85,71],[95,64,85,72],[96,10,86,16],[96,11,86,17],[96,17,87,21],[97,12,88,20,"tcModel"],[97,19,88,27],[97,20,88,28,"key"],[97,23,88,31],[97,24,88,32],[97,27,88,35,"encoder"],[97,34,88,42],[97,35,88,43,"decode"],[97,41,88,49],[97,42,88,50,"bits"],[97,46,88,54],[97,48,88,56,"numBits"],[97,55,88,63],[97,56,88,64],[98,10,89,16],[99,10,90,16],[99,14,90,20,"Number"],[99,20,90,26],[99,21,90,27,"isInteger"],[99,30,90,36],[99,31,90,37,"numBits"],[99,38,90,44],[99,39,90,45],[99,41,90,47],[100,12,91,20,"bStringIdx"],[100,22,91,30],[100,26,91,34,"numBits"],[100,33,91,41],[101,10,92,16],[101,11,92,17],[101,17,93,21],[101,21,93,25,"Number"],[101,27,93,31],[101,28,93,32,"isInteger"],[101,37,93,41],[101,38,93,42,"tcModel"],[101,45,93,49],[101,46,93,50,"key"],[101,49,93,53],[101,50,93,54],[101,51,93,55,"bitLength"],[101,60,93,64],[101,61,93,65],[101,63,93,67],[102,12,94,20,"bStringIdx"],[102,22,94,30],[102,26,94,34,"tcModel"],[102,33,94,41],[102,34,94,42,"key"],[102,37,94,45],[102,38,94,46],[102,39,94,47,"bitLength"],[102,48,94,56],[103,10,95,16],[103,11,95,17],[103,17,96,21],[104,12,97,20],[104,18,97,26],[104,22,97,30,"DecodingError"],[104,36,97,43],[104,37,97,43,"DecodingError"],[104,50,97,43],[104,51,97,44,"key"],[104,54,97,47],[104,55,97,48],[105,10,98,16],[106,8,99,12],[107,6,100,8],[107,7,100,9],[107,8,100,10],[108,6,101,8],[108,13,101,15,"tcModel"],[108,20,101,22],[109,4,102,4],[110,4,103,4],[110,11,103,11,"isPublisherCustom"],[110,28,103,28,"isPublisherCustom"],[110,29,103,29,"key"],[110,32,103,32],[110,34,103,34],[111,6,104,8],[111,13,104,15,"key"],[111,16,104,18],[111,17,104,19,"indexOf"],[111,24,104,26],[111,25,104,27],[111,42,104,44],[111,43,104,45],[111,48,104,50],[111,49,104,51],[112,4,105,4],[113,2,106,0],[114,0,106,1],[114,3]],"functionMap":{"names":["<global>","SegmentEncoder","encode","sequence.forEach$argument_0","decode","isPublisherCustom"],"mappings":"AAA;OCO;ICE;yBCiB;SDoB;KDG;IGC;yBDW;SCsC;KHE;IIC;KJE;CDC"},"hasCjsExports":false},"type":"js/module"}]}