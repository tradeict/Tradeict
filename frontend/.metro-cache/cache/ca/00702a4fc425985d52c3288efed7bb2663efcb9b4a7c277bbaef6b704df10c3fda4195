{"dependencies":[{"name":"./PurposeRestriction.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":61,"index":61}}],"key":"FdlahdeOvwZ9R2ec1GwiLKv3Nus=","exportNames":["*"],"imports":1}},{"name":"./BinarySearchTree.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":62},"end":{"line":2,"column":57,"index":119}}],"key":"UNAjMrSqUeogaCkegxlbh00zeCM=","exportNames":["*"],"imports":1}},{"name":"./RestrictionType.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":120},"end":{"line":3,"column":55,"index":175}}],"key":"QvzwagpQEHyUHt2gmf30kTBSy2A=","exportNames":["*"],"imports":1}},{"name":"../Cloneable.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":176},"end":{"line":4,"column":44,"index":220}}],"key":"FJQ7sPyD2S04pmlIJS/Y7IUPNDY=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"PurposeRestrictionVector\", {\n    enumerable: true,\n    get: function () {\n      return PurposeRestrictionVector;\n    }\n  });\n  var _PurposeRestrictionJs = require(_dependencyMap[0], \"./PurposeRestriction.js\");\n  var _BinarySearchTreeJs = require(_dependencyMap[1], \"./BinarySearchTree.js\");\n  var _RestrictionTypeJs = require(_dependencyMap[2], \"./RestrictionType.js\");\n  var _CloneableJs = require(_dependencyMap[3], \"../Cloneable.js\");\n  class PurposeRestrictionVector extends _CloneableJs.Cloneable {\n    /**\n     * if this originatd from an encoded string we'll need a place to store the\n     * bit length; it can be set and got from here\n     */\n    bitLength = 0;\n    /**\n     * a map indexed by a string which will be a 'hash' of the purpose and\n     * restriction type.\n     *\n     * Using a BST to keep vendors in a sorted order for encoding later\n     */\n    map = new Map();\n    has(hash) {\n      return this.map.has(hash);\n    }\n    isOkToHave(restrictionType, purposeId, vendorId) {\n      let result = true;\n      /**\n       * without a gvl set, there's no way to know... in that case we'll return\n       * true but once the GVL is set later we'll go through these and clean up\n       * the mess.\n       */\n      if (this.gvl?.vendors) {\n        const vendor = this.gvl.vendors[vendorId];\n        if (vendor) {\n          if (restrictionType === _RestrictionTypeJs.RestrictionType.NOT_ALLOWED) {\n            /**\n             * if it's \"not allowed\" then flexible declaration is ignored but if\n             * if it isn't even listed as one of the purposes the vendor uses,\n             * then there is no reason to encode the value so check both arrays\n             * to see if it exists.  If it does then we can restrict it.\n             */\n            result = vendor.legIntPurposes.includes(purposeId) || vendor.purposes.includes(purposeId);\n          } else if (vendor.flexiblePurposes.length) {\n            switch (restrictionType) {\n              /**\n               * If the vendor has the purposeId in flexiblePurposes and it is\n               * listed as a legitimate interest purpose we can set the\n               * override to require consent.\n               */\n              case _RestrictionTypeJs.RestrictionType.REQUIRE_CONSENT:\n                result = vendor.flexiblePurposes.includes(purposeId) && vendor.legIntPurposes.includes(purposeId);\n                break;\n              /**\n               * If the vendor has the purposeId in flexiblePurposes and it is\n               * listed as a consent purpose we can set the\n               * override to require legitimate interest.\n               */\n              case _RestrictionTypeJs.RestrictionType.REQUIRE_LI:\n                result = vendor.flexiblePurposes.includes(purposeId) && vendor.purposes.includes(purposeId);\n                break;\n            }\n          } else {\n            result = false;\n          }\n        } else {\n          // this vendor doesn't exist\n          result = false;\n        }\n      }\n      // if the gvl isn't defined, we can't do anything until later\n      return result;\n    }\n    /**\n     * add - adds a given Vendor ID under a given Purpose Restriction\n     *\n     * @param {number} vendorId\n     * @param {PurposeRestriction} purposeRestriction\n     * @return {void}\n     */\n    add(vendorId, purposeRestriction) {\n      if (this.isOkToHave(purposeRestriction.restrictionType, purposeRestriction.purposeId, vendorId)) {\n        const hash = purposeRestriction.hash;\n        if (!this.has(hash)) {\n          this.map.set(hash, new _BinarySearchTreeJs.BinarySearchTree());\n          this.bitLength = 0;\n        }\n        /**\n         * Previously I had a check here to remove a duplicate value, but because\n         * we're using a tree the value is guaranteed to be unique so there is no\n         * need to add an additional de-duplication here.\n         */\n        this.map.get(hash).add(vendorId);\n      }\n    }\n    /**\n     * restrictPurposeToLegalBasis - adds all Vendors under a given Purpose Restriction\n     *\n     * @param {PurposeRestriction} purposeRestriction\n     * @return {void}\n     */\n    restrictPurposeToLegalBasis(purposeRestriction) {\n      const vendors = this.gvl.vendorIds;\n      const hash = purposeRestriction.hash;\n      const lastEntry = function () {\n        let value;\n        for (value of vendors);\n        return value;\n      }();\n      /**\n       * Create an ordered array of vendor IDs from `1` (the minimum value for Vendor ID) to `lastEntry`\n       */\n      const values = [...Array(lastEntry).keys()].map(i => i + 1);\n      for (let i = 1; i <= lastEntry; i++) {\n        if (!this.has(hash)) {\n          this.map.set(hash, _BinarySearchTreeJs.BinarySearchTree.build(values)); // use static method `build` to create a `BST` from the ordered array of IDs\n          this.bitLength = 0;\n        }\n        /**\n         * Previously I had a check here to remove a duplicate value, but because\n         * we're using a tree the value is guaranteed to be unique so there is no\n         * need to add an additional de-duplication here.\n         */\n        this.map.get(hash).add(i);\n      }\n    }\n    /**\n     * getVendors - returns array of vendor ids optionally narrowed by a given\n     * Purpose Restriction.  If no purpose restriction is passed then all vendor\n     * ids will be returned.  One can expect this result to be a unique set of\n     * ids no duplicates.\n     *\n     * @param {PurposeRestriction} [purposeRestriction] - optionally passed to\n     * get only Vendor IDs restricted under the given Purpose Restriction\n     * @return {number[]} - Unique ID set of vendors\n     */\n    getVendors(purposeRestriction) {\n      let vendorIds = [];\n      if (purposeRestriction) {\n        const hash = purposeRestriction.hash;\n        if (this.has(hash)) {\n          vendorIds = this.map.get(hash).get();\n        }\n      } else {\n        const vendorSet = new Set();\n        this.map.forEach(bst => {\n          bst.get().forEach(vendorId => {\n            vendorSet.add(vendorId);\n          });\n        });\n        vendorIds = Array.from(vendorSet);\n      }\n      return vendorIds;\n    }\n    getRestrictionType(vendorId, purposeId) {\n      let rType;\n      this.getRestrictions(vendorId).forEach(purposeRestriction => {\n        if (purposeRestriction.purposeId === purposeId) {\n          if (rType === undefined || rType > purposeRestriction.restrictionType) {\n            rType = purposeRestriction.restrictionType;\n          }\n        }\n      });\n      return rType;\n    }\n    /**\n     * vendorHasRestriction - determines whether a given Vendor ID is under a\n     * given Purpose Restriction\n     *\n     * @param {number} vendorId\n     * @param {PurposeRestriction} purposeRestriction\n     * @return {boolean} - true if the give Vendor ID is under the given Purpose\n     * Restriction\n     */\n    vendorHasRestriction(vendorId, purposeRestriction) {\n      let has = false;\n      const restrictions = this.getRestrictions(vendorId);\n      for (let i = 0; i < restrictions.length && !has; i++) {\n        has = purposeRestriction.isSameAs(restrictions[i]);\n      }\n      return has;\n    }\n    /**\n     * getMaxVendorId - gets the Maximum Vendor ID regardless of Purpose\n     * Restriction\n     *\n     * @return {number} - maximum Vendor ID\n     */\n    getMaxVendorId() {\n      let retr = 0;\n      this.map.forEach(bst => {\n        retr = Math.max(bst.max(), retr);\n      });\n      return retr;\n    }\n    getRestrictions(vendorId) {\n      const retr = [];\n      this.map.forEach((bst, hash) => {\n        if (vendorId) {\n          if (bst.contains(vendorId)) {\n            retr.push(_PurposeRestrictionJs.PurposeRestriction.unHash(hash));\n          }\n        } else {\n          retr.push(_PurposeRestrictionJs.PurposeRestriction.unHash(hash));\n        }\n      });\n      return retr;\n    }\n    getPurposes() {\n      const purposeIds = new Set();\n      this.map.forEach((bst, hash) => {\n        purposeIds.add(_PurposeRestrictionJs.PurposeRestriction.unHash(hash).purposeId);\n      });\n      return Array.from(purposeIds);\n    }\n    /**\n     * remove - removes Vendor ID from a Purpose Restriction\n     *\n     * @param {number} vendorId\n     * @param {PurposeRestriction} purposeRestriction\n     * @return {void}\n     */\n    remove(vendorId, purposeRestriction) {\n      const hash = purposeRestriction.hash;\n      const bst = this.map.get(hash);\n      if (bst) {\n        bst.remove(vendorId);\n        // if it's empty let's delete the key so it doesn't show up empty\n        if (bst.isEmpty()) {\n          this.map.delete(hash);\n          this.bitLength = 0;\n        }\n      }\n    }\n    /**\n     * Essential for being able to determine whether we can actually set a\n     * purpose restriction since they have to have a flexible legal basis\n     *\n     * @param {GVL} value - the GVL instance\n     */\n    set gvl(value) {\n      if (!this.gvl_) {\n        this.gvl_ = value;\n        /**\n         * if we have restrictions set before the gvl is set then we'll have to\n         * go through and remove some if they're not valid\n         */\n        this.map.forEach((bst, hash) => {\n          const purposeRestriction = _PurposeRestrictionJs.PurposeRestriction.unHash(hash);\n          const vendors = bst.get();\n          vendors.forEach(vendorId => {\n            if (!this.isOkToHave(purposeRestriction.restrictionType, purposeRestriction.purposeId, vendorId)) {\n              bst.remove(vendorId);\n            }\n          });\n        });\n      }\n    }\n    /**\n     * gvl returns local copy of the GVL these restrictions apply to\n     *\n     * @return {GVL}\n     */\n    get gvl() {\n      return this.gvl_;\n    }\n    /**\n     * isEmpty - whether or not this vector has any restrictions in it\n     *\n     * @return {boolean}\n     */\n    isEmpty() {\n      return this.map.size === 0;\n    }\n    /**\n     * numRestrictions - returns the number of Purpose Restrictions.\n     *\n     * @return {number}\n     */\n    get numRestrictions() {\n      return this.map.size;\n    }\n  }\n});","lineCount":291,"map":[[7,2,5,0,"Object"],[7,8,5,0],[7,9,5,0,"defineProperty"],[7,23,5,0],[7,24,5,0,"exports"],[7,31,5,0],[8,4,5,0,"enumerable"],[8,14,5,0],[9,4,5,0,"get"],[9,7,5,0],[9,18,5,0,"get"],[9,19,5,0],[10,6,5,0],[10,13,5,0,"PurposeRestrictionVector"],[10,37,5,0],[11,4,5,0],[12,2,5,0],[13,2,1,0],[13,6,1,0,"_PurposeRestrictionJs"],[13,27,1,0],[13,30,1,0,"require"],[13,37,1,0],[13,38,1,0,"_dependencyMap"],[13,52,1,0],[14,2,2,0],[14,6,2,0,"_BinarySearchTreeJs"],[14,25,2,0],[14,28,2,0,"require"],[14,35,2,0],[14,36,2,0,"_dependencyMap"],[14,50,2,0],[15,2,3,0],[15,6,3,0,"_RestrictionTypeJs"],[15,24,3,0],[15,27,3,0,"require"],[15,34,3,0],[15,35,3,0,"_dependencyMap"],[15,49,3,0],[16,2,4,0],[16,6,4,0,"_CloneableJs"],[16,18,4,0],[16,21,4,0,"require"],[16,28,4,0],[16,29,4,0,"_dependencyMap"],[16,43,4,0],[17,2,5,7],[17,8,5,13,"PurposeRestrictionVector"],[17,32,5,37],[17,41,5,46,"Cloneable"],[17,53,5,55],[17,54,5,55,"Cloneable"],[17,63,5,55],[17,64,5,56],[18,4,6,4],[19,0,7,0],[20,0,8,0],[21,0,9,0],[22,4,10,4,"bitLength"],[22,13,10,13],[22,16,10,16],[22,17,10,17],[23,4,11,4],[24,0,12,0],[25,0,13,0],[26,0,14,0],[27,0,15,0],[28,0,16,0],[29,4,17,4,"map"],[29,7,17,7],[29,10,17,10],[29,14,17,14,"Map"],[29,17,17,17],[29,18,17,18],[29,19,17,19],[30,4,19,4,"has"],[30,7,19,7,"has"],[30,8,19,8,"hash"],[30,12,19,12],[30,14,19,14],[31,6,20,8],[31,13,20,15],[31,17,20,19],[31,18,20,20,"map"],[31,21,20,23],[31,22,20,24,"has"],[31,25,20,27],[31,26,20,28,"hash"],[31,30,20,32],[31,31,20,33],[32,4,21,4],[33,4,22,4,"isOkToHave"],[33,14,22,14,"isOkToHave"],[33,15,22,15,"restrictionType"],[33,30,22,30],[33,32,22,32,"purposeId"],[33,41,22,41],[33,43,22,43,"vendorId"],[33,51,22,51],[33,53,22,53],[34,6,23,8],[34,10,23,12,"result"],[34,16,23,18],[34,19,23,21],[34,23,23,25],[35,6,24,8],[36,0,25,0],[37,0,26,0],[38,0,27,0],[39,0,28,0],[40,6,29,8],[40,10,29,12],[40,14,29,16],[40,15,29,17,"gvl"],[40,18,29,20],[40,20,29,22,"vendors"],[40,27,29,29],[40,29,29,31],[41,8,30,12],[41,14,30,18,"vendor"],[41,20,30,24],[41,23,30,27],[41,27,30,31],[41,28,30,32,"gvl"],[41,31,30,35],[41,32,30,36,"vendors"],[41,39,30,43],[41,40,30,44,"vendorId"],[41,48,30,52],[41,49,30,53],[42,8,31,12],[42,12,31,16,"vendor"],[42,18,31,22],[42,20,31,24],[43,10,32,16],[43,14,32,20,"restrictionType"],[43,29,32,35],[43,34,32,40,"RestrictionType"],[43,52,32,55],[43,53,32,55,"RestrictionType"],[43,68,32,55],[43,69,32,56,"NOT_ALLOWED"],[43,80,32,67],[43,82,32,69],[44,12,33,20],[45,0,34,0],[46,0,35,0],[47,0,36,0],[48,0,37,0],[49,0,38,0],[50,12,39,20,"result"],[50,18,39,26],[50,21,39,30,"vendor"],[50,27,39,36],[50,28,39,37,"legIntPurposes"],[50,42,39,51],[50,43,39,52,"includes"],[50,51,39,60],[50,52,39,61,"purposeId"],[50,61,39,70],[50,62,39,71],[50,66,39,75,"vendor"],[50,72,39,81],[50,73,39,82,"purposes"],[50,81,39,90],[50,82,39,91,"includes"],[50,90,39,99],[50,91,39,100,"purposeId"],[50,100,39,109],[50,101,39,111],[51,10,40,16],[51,11,40,17],[51,17,41,21],[51,21,41,25,"vendor"],[51,27,41,31],[51,28,41,32,"flexiblePurposes"],[51,44,41,48],[51,45,41,49,"length"],[51,51,41,55],[51,53,41,57],[52,12,42,20],[52,20,42,28,"restrictionType"],[52,35,42,43],[53,14,43,24],[54,0,44,0],[55,0,45,0],[56,0,46,0],[57,0,47,0],[58,14,48,24],[58,19,48,29,"RestrictionType"],[58,37,48,44],[58,38,48,44,"RestrictionType"],[58,53,48,44],[58,54,48,45,"REQUIRE_CONSENT"],[58,69,48,60],[59,16,49,28,"result"],[59,22,49,34],[59,25,49,38,"vendor"],[59,31,49,44],[59,32,49,45,"flexiblePurposes"],[59,48,49,61],[59,49,49,62,"includes"],[59,57,49,70],[59,58,49,71,"purposeId"],[59,67,49,80],[59,68,49,81],[59,72,49,85,"vendor"],[59,78,49,91],[59,79,49,92,"legIntPurposes"],[59,93,49,106],[59,94,49,107,"includes"],[59,102,49,115],[59,103,49,116,"purposeId"],[59,112,49,125],[59,113,49,127],[60,16,50,28],[61,14,51,24],[62,0,52,0],[63,0,53,0],[64,0,54,0],[65,0,55,0],[66,14,56,24],[66,19,56,29,"RestrictionType"],[66,37,56,44],[66,38,56,44,"RestrictionType"],[66,53,56,44],[66,54,56,45,"REQUIRE_LI"],[66,64,56,55],[67,16,57,28,"result"],[67,22,57,34],[67,25,57,38,"vendor"],[67,31,57,44],[67,32,57,45,"flexiblePurposes"],[67,48,57,61],[67,49,57,62,"includes"],[67,57,57,70],[67,58,57,71,"purposeId"],[67,67,57,80],[67,68,57,81],[67,72,57,85,"vendor"],[67,78,57,91],[67,79,57,92,"purposes"],[67,87,57,100],[67,88,57,101,"includes"],[67,96,57,109],[67,97,57,110,"purposeId"],[67,106,57,119],[67,107,57,121],[68,16,58,28],[69,12,59,20],[70,10,60,16],[70,11,60,17],[70,17,61,21],[71,12,62,20,"result"],[71,18,62,26],[71,21,62,29],[71,26,62,34],[72,10,63,16],[73,8,64,12],[73,9,64,13],[73,15,65,17],[74,10,66,16],[75,10,67,16,"result"],[75,16,67,22],[75,19,67,25],[75,24,67,30],[76,8,68,12],[77,6,69,8],[78,6,70,8],[79,6,71,8],[79,13,71,15,"result"],[79,19,71,21],[80,4,72,4],[81,4,73,4],[82,0,74,0],[83,0,75,0],[84,0,76,0],[85,0,77,0],[86,0,78,0],[87,0,79,0],[88,4,80,4,"add"],[88,7,80,7,"add"],[88,8,80,8,"vendorId"],[88,16,80,16],[88,18,80,18,"purposeRestriction"],[88,36,80,36],[88,38,80,38],[89,6,81,8],[89,10,81,12],[89,14,81,16],[89,15,81,17,"isOkToHave"],[89,25,81,27],[89,26,81,28,"purposeRestriction"],[89,44,81,46],[89,45,81,47,"restrictionType"],[89,60,81,62],[89,62,81,64,"purposeRestriction"],[89,80,81,82],[89,81,81,83,"purposeId"],[89,90,81,92],[89,92,81,94,"vendorId"],[89,100,81,102],[89,101,81,103],[89,103,81,105],[90,8,82,12],[90,14,82,18,"hash"],[90,18,82,22],[90,21,82,25,"purposeRestriction"],[90,39,82,43],[90,40,82,44,"hash"],[90,44,82,48],[91,8,83,12],[91,12,83,16],[91,13,83,17],[91,17,83,21],[91,18,83,22,"has"],[91,21,83,25],[91,22,83,26,"hash"],[91,26,83,30],[91,27,83,31],[91,29,83,33],[92,10,84,16],[92,14,84,20],[92,15,84,21,"map"],[92,18,84,24],[92,19,84,25,"set"],[92,22,84,28],[92,23,84,29,"hash"],[92,27,84,33],[92,29,84,35],[92,33,84,39,"BinarySearchTree"],[92,52,84,55],[92,53,84,55,"BinarySearchTree"],[92,69,84,55],[92,70,84,56],[92,71,84,57],[92,72,84,58],[93,10,85,16],[93,14,85,20],[93,15,85,21,"bitLength"],[93,24,85,30],[93,27,85,33],[93,28,85,34],[94,8,86,12],[95,8,87,12],[96,0,88,0],[97,0,89,0],[98,0,90,0],[99,0,91,0],[100,8,92,12],[100,12,92,16],[100,13,92,17,"map"],[100,16,92,20],[100,17,92,21,"get"],[100,20,92,24],[100,21,92,25,"hash"],[100,25,92,29],[100,26,92,30],[100,27,92,31,"add"],[100,30,92,34],[100,31,92,35,"vendorId"],[100,39,92,43],[100,40,92,44],[101,6,93,8],[102,4,94,4],[103,4,95,4],[104,0,96,0],[105,0,97,0],[106,0,98,0],[107,0,99,0],[108,0,100,0],[109,4,101,4,"restrictPurposeToLegalBasis"],[109,31,101,31,"restrictPurposeToLegalBasis"],[109,32,101,32,"purposeRestriction"],[109,50,101,50],[109,52,101,52],[110,6,102,8],[110,12,102,14,"vendors"],[110,19,102,21],[110,22,102,24],[110,26,102,28],[110,27,102,29,"gvl"],[110,30,102,32],[110,31,102,33,"vendorIds"],[110,40,102,42],[111,6,103,8],[111,12,103,14,"hash"],[111,16,103,18],[111,19,103,21,"purposeRestriction"],[111,37,103,39],[111,38,103,40,"hash"],[111,42,103,44],[112,6,104,8],[112,12,104,14,"lastEntry"],[112,21,104,23],[112,24,104,27],[112,36,104,39],[113,8,105,12],[113,12,105,16,"value"],[113,17,105,21],[114,8,106,12],[114,13,106,17,"value"],[114,18,106,22],[114,22,106,26,"vendors"],[114,29,106,33],[114,30,107,16],[115,8,108,12],[115,15,108,19,"value"],[115,20,108,24],[116,6,109,8],[116,7,109,9],[116,8,109,11],[116,9,109,12],[117,6,110,8],[118,0,111,0],[119,0,112,0],[120,6,113,8],[120,12,113,14,"values"],[120,18,113,20],[120,21,113,23],[120,22,113,24],[120,25,113,27,"Array"],[120,30,113,32],[120,31,113,33,"lastEntry"],[120,40,113,42],[120,41,113,43],[120,42,113,44,"keys"],[120,46,113,48],[120,47,113,49],[120,48,113,50],[120,49,113,51],[120,50,113,52,"map"],[120,53,113,55],[120,54,113,57,"i"],[120,55,113,58],[120,59,113,63,"i"],[120,60,113,64],[120,63,113,67],[120,64,113,68],[120,65,113,69],[121,6,114,8],[121,11,114,13],[121,15,114,17,"i"],[121,16,114,18],[121,19,114,21],[121,20,114,22],[121,22,114,24,"i"],[121,23,114,25],[121,27,114,29,"lastEntry"],[121,36,114,38],[121,38,114,40,"i"],[121,39,114,41],[121,41,114,43],[121,43,114,45],[122,8,115,12],[122,12,115,16],[122,13,115,17],[122,17,115,21],[122,18,115,22,"has"],[122,21,115,25],[122,22,115,26,"hash"],[122,26,115,30],[122,27,115,31],[122,29,115,33],[123,10,116,16],[123,14,116,20],[123,15,116,21,"map"],[123,18,116,24],[123,19,116,25,"set"],[123,22,116,28],[123,23,116,29,"hash"],[123,27,116,33],[123,29,116,35,"BinarySearchTree"],[123,48,116,51],[123,49,116,51,"BinarySearchTree"],[123,65,116,51],[123,66,116,52,"build"],[123,71,116,57],[123,72,116,58,"values"],[123,78,116,64],[123,79,116,65],[123,80,116,66],[123,81,116,67],[123,82,116,68],[124,10,117,16],[124,14,117,20],[124,15,117,21,"bitLength"],[124,24,117,30],[124,27,117,33],[124,28,117,34],[125,8,118,12],[126,8,119,12],[127,0,120,0],[128,0,121,0],[129,0,122,0],[130,0,123,0],[131,8,124,12],[131,12,124,16],[131,13,124,17,"map"],[131,16,124,20],[131,17,124,21,"get"],[131,20,124,24],[131,21,124,25,"hash"],[131,25,124,29],[131,26,124,30],[131,27,124,31,"add"],[131,30,124,34],[131,31,124,35,"i"],[131,32,124,36],[131,33,124,37],[132,6,125,8],[133,4,126,4],[134,4,127,4],[135,0,128,0],[136,0,129,0],[137,0,130,0],[138,0,131,0],[139,0,132,0],[140,0,133,0],[141,0,134,0],[142,0,135,0],[143,0,136,0],[144,4,137,4,"getVendors"],[144,14,137,14,"getVendors"],[144,15,137,15,"purposeRestriction"],[144,33,137,33],[144,35,137,35],[145,6,138,8],[145,10,138,12,"vendorIds"],[145,19,138,21],[145,22,138,24],[145,24,138,26],[146,6,139,8],[146,10,139,12,"purposeRestriction"],[146,28,139,30],[146,30,139,32],[147,8,140,12],[147,14,140,18,"hash"],[147,18,140,22],[147,21,140,25,"purposeRestriction"],[147,39,140,43],[147,40,140,44,"hash"],[147,44,140,48],[148,8,141,12],[148,12,141,16],[148,16,141,20],[148,17,141,21,"has"],[148,20,141,24],[148,21,141,25,"hash"],[148,25,141,29],[148,26,141,30],[148,28,141,32],[149,10,142,16,"vendorIds"],[149,19,142,25],[149,22,142,28],[149,26,142,32],[149,27,142,33,"map"],[149,30,142,36],[149,31,142,37,"get"],[149,34,142,40],[149,35,142,41,"hash"],[149,39,142,45],[149,40,142,46],[149,41,142,47,"get"],[149,44,142,50],[149,45,142,51],[149,46,142,52],[150,8,143,12],[151,6,144,8],[151,7,144,9],[151,13,145,13],[152,8,146,12],[152,14,146,18,"vendorSet"],[152,23,146,27],[152,26,146,30],[152,30,146,34,"Set"],[152,33,146,37],[152,34,146,38],[152,35,146,39],[153,8,147,12],[153,12,147,16],[153,13,147,17,"map"],[153,16,147,20],[153,17,147,21,"forEach"],[153,24,147,28],[153,25,147,30,"bst"],[153,28,147,33],[153,32,147,38],[154,10,148,16,"bst"],[154,13,148,19],[154,14,148,20,"get"],[154,17,148,23],[154,18,148,24],[154,19,148,25],[154,20,148,26,"forEach"],[154,27,148,33],[154,28,148,35,"vendorId"],[154,36,148,43],[154,40,148,48],[155,12,149,20,"vendorSet"],[155,21,149,29],[155,22,149,30,"add"],[155,25,149,33],[155,26,149,34,"vendorId"],[155,34,149,42],[155,35,149,43],[156,10,150,16],[156,11,150,17],[156,12,150,18],[157,8,151,12],[157,9,151,13],[157,10,151,14],[158,8,152,12,"vendorIds"],[158,17,152,21],[158,20,152,24,"Array"],[158,25,152,29],[158,26,152,30,"from"],[158,30,152,34],[158,31,152,35,"vendorSet"],[158,40,152,44],[158,41,152,45],[159,6,153,8],[160,6,154,8],[160,13,154,15,"vendorIds"],[160,22,154,24],[161,4,155,4],[162,4,156,4,"getRestrictionType"],[162,22,156,22,"getRestrictionType"],[162,23,156,23,"vendorId"],[162,31,156,31],[162,33,156,33,"purposeId"],[162,42,156,42],[162,44,156,44],[163,6,157,8],[163,10,157,12,"rType"],[163,15,157,17],[164,6,158,8],[164,10,158,12],[164,11,158,13,"getRestrictions"],[164,26,158,28],[164,27,158,29,"vendorId"],[164,35,158,37],[164,36,158,38],[164,37,158,39,"forEach"],[164,44,158,46],[164,45,158,48,"purposeRestriction"],[164,63,158,66],[164,67,158,71],[165,8,159,12],[165,12,159,16,"purposeRestriction"],[165,30,159,34],[165,31,159,35,"purposeId"],[165,40,159,44],[165,45,159,49,"purposeId"],[165,54,159,58],[165,56,159,60],[166,10,160,16],[166,14,160,20,"rType"],[166,19,160,25],[166,24,160,30,"undefined"],[166,33,160,39],[166,37,160,43,"rType"],[166,42,160,48],[166,45,160,51,"purposeRestriction"],[166,63,160,69],[166,64,160,70,"restrictionType"],[166,79,160,85],[166,81,160,87],[167,12,161,20,"rType"],[167,17,161,25],[167,20,161,28,"purposeRestriction"],[167,38,161,46],[167,39,161,47,"restrictionType"],[167,54,161,62],[168,10,162,16],[169,8,163,12],[170,6,164,8],[170,7,164,9],[170,8,164,10],[171,6,165,8],[171,13,165,15,"rType"],[171,18,165,20],[172,4,166,4],[173,4,167,4],[174,0,168,0],[175,0,169,0],[176,0,170,0],[177,0,171,0],[178,0,172,0],[179,0,173,0],[180,0,174,0],[181,0,175,0],[182,4,176,4,"vendorHasRestriction"],[182,24,176,24,"vendorHasRestriction"],[182,25,176,25,"vendorId"],[182,33,176,33],[182,35,176,35,"purposeRestriction"],[182,53,176,53],[182,55,176,55],[183,6,177,8],[183,10,177,12,"has"],[183,13,177,15],[183,16,177,18],[183,21,177,23],[184,6,178,8],[184,12,178,14,"restrictions"],[184,24,178,26],[184,27,178,29],[184,31,178,33],[184,32,178,34,"getRestrictions"],[184,47,178,49],[184,48,178,50,"vendorId"],[184,56,178,58],[184,57,178,59],[185,6,179,8],[185,11,179,13],[185,15,179,17,"i"],[185,16,179,18],[185,19,179,21],[185,20,179,22],[185,22,179,24,"i"],[185,23,179,25],[185,26,179,28,"restrictions"],[185,38,179,40],[185,39,179,41,"length"],[185,45,179,47],[185,49,179,51],[185,50,179,52,"has"],[185,53,179,55],[185,55,179,57,"i"],[185,56,179,58],[185,58,179,60],[185,60,179,62],[186,8,180,12,"has"],[186,11,180,15],[186,14,180,18,"purposeRestriction"],[186,32,180,36],[186,33,180,37,"isSameAs"],[186,41,180,45],[186,42,180,46,"restrictions"],[186,54,180,58],[186,55,180,59,"i"],[186,56,180,60],[186,57,180,61],[186,58,180,62],[187,6,181,8],[188,6,182,8],[188,13,182,15,"has"],[188,16,182,18],[189,4,183,4],[190,4,184,4],[191,0,185,0],[192,0,186,0],[193,0,187,0],[194,0,188,0],[195,0,189,0],[196,4,190,4,"getMaxVendorId"],[196,18,190,18,"getMaxVendorId"],[196,19,190,18],[196,21,190,21],[197,6,191,8],[197,10,191,12,"retr"],[197,14,191,16],[197,17,191,19],[197,18,191,20],[198,6,192,8],[198,10,192,12],[198,11,192,13,"map"],[198,14,192,16],[198,15,192,17,"forEach"],[198,22,192,24],[198,23,192,26,"bst"],[198,26,192,29],[198,30,192,34],[199,8,193,12,"retr"],[199,12,193,16],[199,15,193,19,"Math"],[199,19,193,23],[199,20,193,24,"max"],[199,23,193,27],[199,24,193,28,"bst"],[199,27,193,31],[199,28,193,32,"max"],[199,31,193,35],[199,32,193,36],[199,33,193,37],[199,35,193,39,"retr"],[199,39,193,43],[199,40,193,44],[200,6,194,8],[200,7,194,9],[200,8,194,10],[201,6,195,8],[201,13,195,15,"retr"],[201,17,195,19],[202,4,196,4],[203,4,197,4,"getRestrictions"],[203,19,197,19,"getRestrictions"],[203,20,197,20,"vendorId"],[203,28,197,28],[203,30,197,30],[204,6,198,8],[204,12,198,14,"retr"],[204,16,198,18],[204,19,198,21],[204,21,198,23],[205,6,199,8],[205,10,199,12],[205,11,199,13,"map"],[205,14,199,16],[205,15,199,17,"forEach"],[205,22,199,24],[205,23,199,25],[205,24,199,26,"bst"],[205,27,199,29],[205,29,199,31,"hash"],[205,33,199,35],[205,38,199,40],[206,8,200,12],[206,12,200,16,"vendorId"],[206,20,200,24],[206,22,200,26],[207,10,201,16],[207,14,201,20,"bst"],[207,17,201,23],[207,18,201,24,"contains"],[207,26,201,32],[207,27,201,33,"vendorId"],[207,35,201,41],[207,36,201,42],[207,38,201,44],[208,12,202,20,"retr"],[208,16,202,24],[208,17,202,25,"push"],[208,21,202,29],[208,22,202,30,"PurposeRestriction"],[208,43,202,48],[208,44,202,48,"PurposeRestriction"],[208,62,202,48],[208,63,202,49,"unHash"],[208,69,202,55],[208,70,202,56,"hash"],[208,74,202,60],[208,75,202,61],[208,76,202,62],[209,10,203,16],[210,8,204,12],[210,9,204,13],[210,15,205,17],[211,10,206,16,"retr"],[211,14,206,20],[211,15,206,21,"push"],[211,19,206,25],[211,20,206,26,"PurposeRestriction"],[211,41,206,44],[211,42,206,44,"PurposeRestriction"],[211,60,206,44],[211,61,206,45,"unHash"],[211,67,206,51],[211,68,206,52,"hash"],[211,72,206,56],[211,73,206,57],[211,74,206,58],[212,8,207,12],[213,6,208,8],[213,7,208,9],[213,8,208,10],[214,6,209,8],[214,13,209,15,"retr"],[214,17,209,19],[215,4,210,4],[216,4,211,4,"getPurposes"],[216,15,211,15,"getPurposes"],[216,16,211,15],[216,18,211,18],[217,6,212,8],[217,12,212,14,"purposeIds"],[217,22,212,24],[217,25,212,27],[217,29,212,31,"Set"],[217,32,212,34],[217,33,212,35],[217,34,212,36],[218,6,213,8],[218,10,213,12],[218,11,213,13,"map"],[218,14,213,16],[218,15,213,17,"forEach"],[218,22,213,24],[218,23,213,25],[218,24,213,26,"bst"],[218,27,213,29],[218,29,213,31,"hash"],[218,33,213,35],[218,38,213,40],[219,8,214,12,"purposeIds"],[219,18,214,22],[219,19,214,23,"add"],[219,22,214,26],[219,23,214,27,"PurposeRestriction"],[219,44,214,45],[219,45,214,45,"PurposeRestriction"],[219,63,214,45],[219,64,214,46,"unHash"],[219,70,214,52],[219,71,214,53,"hash"],[219,75,214,57],[219,76,214,58],[219,77,214,59,"purposeId"],[219,86,214,68],[219,87,214,69],[220,6,215,8],[220,7,215,9],[220,8,215,10],[221,6,216,8],[221,13,216,15,"Array"],[221,18,216,20],[221,19,216,21,"from"],[221,23,216,25],[221,24,216,26,"purposeIds"],[221,34,216,36],[221,35,216,37],[222,4,217,4],[223,4,218,4],[224,0,219,0],[225,0,220,0],[226,0,221,0],[227,0,222,0],[228,0,223,0],[229,0,224,0],[230,4,225,4,"remove"],[230,10,225,10,"remove"],[230,11,225,11,"vendorId"],[230,19,225,19],[230,21,225,21,"purposeRestriction"],[230,39,225,39],[230,41,225,41],[231,6,226,8],[231,12,226,14,"hash"],[231,16,226,18],[231,19,226,21,"purposeRestriction"],[231,37,226,39],[231,38,226,40,"hash"],[231,42,226,44],[232,6,227,8],[232,12,227,14,"bst"],[232,15,227,17],[232,18,227,20],[232,22,227,24],[232,23,227,25,"map"],[232,26,227,28],[232,27,227,29,"get"],[232,30,227,32],[232,31,227,33,"hash"],[232,35,227,37],[232,36,227,38],[233,6,228,8],[233,10,228,12,"bst"],[233,13,228,15],[233,15,228,17],[234,8,229,12,"bst"],[234,11,229,15],[234,12,229,16,"remove"],[234,18,229,22],[234,19,229,23,"vendorId"],[234,27,229,31],[234,28,229,32],[235,8,230,12],[236,8,231,12],[236,12,231,16,"bst"],[236,15,231,19],[236,16,231,20,"isEmpty"],[236,23,231,27],[236,24,231,28],[236,25,231,29],[236,27,231,31],[237,10,232,16],[237,14,232,20],[237,15,232,21,"map"],[237,18,232,24],[237,19,232,25,"delete"],[237,25,232,31],[237,26,232,32,"hash"],[237,30,232,36],[237,31,232,37],[238,10,233,16],[238,14,233,20],[238,15,233,21,"bitLength"],[238,24,233,30],[238,27,233,33],[238,28,233,34],[239,8,234,12],[240,6,235,8],[241,4,236,4],[242,4,237,4],[243,0,238,0],[244,0,239,0],[245,0,240,0],[246,0,241,0],[247,0,242,0],[248,4,243,4],[248,8,243,8,"gvl"],[248,11,243,11,"gvl"],[248,12,243,12,"value"],[248,17,243,17],[248,19,243,19],[249,6,244,8],[249,10,244,12],[249,11,244,13],[249,15,244,17],[249,16,244,18,"gvl_"],[249,20,244,22],[249,22,244,24],[250,8,245,12],[250,12,245,16],[250,13,245,17,"gvl_"],[250,17,245,21],[250,20,245,24,"value"],[250,25,245,29],[251,8,246,12],[252,0,247,0],[253,0,248,0],[254,0,249,0],[255,8,250,12],[255,12,250,16],[255,13,250,17,"map"],[255,16,250,20],[255,17,250,21,"forEach"],[255,24,250,28],[255,25,250,29],[255,26,250,30,"bst"],[255,29,250,33],[255,31,250,35,"hash"],[255,35,250,39],[255,40,250,44],[256,10,251,16],[256,16,251,22,"purposeRestriction"],[256,34,251,40],[256,37,251,43,"PurposeRestriction"],[256,58,251,61],[256,59,251,61,"PurposeRestriction"],[256,77,251,61],[256,78,251,62,"unHash"],[256,84,251,68],[256,85,251,69,"hash"],[256,89,251,73],[256,90,251,74],[257,10,252,16],[257,16,252,22,"vendors"],[257,23,252,29],[257,26,252,32,"bst"],[257,29,252,35],[257,30,252,36,"get"],[257,33,252,39],[257,34,252,40],[257,35,252,41],[258,10,253,16,"vendors"],[258,17,253,23],[258,18,253,24,"forEach"],[258,25,253,31],[258,26,253,33,"vendorId"],[258,34,253,41],[258,38,253,46],[259,12,254,20],[259,16,254,24],[259,17,254,25],[259,21,254,29],[259,22,254,30,"isOkToHave"],[259,32,254,40],[259,33,254,41,"purposeRestriction"],[259,51,254,59],[259,52,254,60,"restrictionType"],[259,67,254,75],[259,69,254,77,"purposeRestriction"],[259,87,254,95],[259,88,254,96,"purposeId"],[259,97,254,105],[259,99,254,107,"vendorId"],[259,107,254,115],[259,108,254,116],[259,110,254,118],[260,14,255,24,"bst"],[260,17,255,27],[260,18,255,28,"remove"],[260,24,255,34],[260,25,255,35,"vendorId"],[260,33,255,43],[260,34,255,44],[261,12,256,20],[262,10,257,16],[262,11,257,17],[262,12,257,18],[263,8,258,12],[263,9,258,13],[263,10,258,14],[264,6,259,8],[265,4,260,4],[266,4,261,4],[267,0,262,0],[268,0,263,0],[269,0,264,0],[270,0,265,0],[271,4,266,4],[271,8,266,8,"gvl"],[271,11,266,11,"gvl"],[271,12,266,11],[271,14,266,14],[272,6,267,8],[272,13,267,15],[272,17,267,19],[272,18,267,20,"gvl_"],[272,22,267,24],[273,4,268,4],[274,4,269,4],[275,0,270,0],[276,0,271,0],[277,0,272,0],[278,0,273,0],[279,4,274,4,"isEmpty"],[279,11,274,11,"isEmpty"],[279,12,274,11],[279,14,274,14],[280,6,275,8],[280,13,275,15],[280,17,275,19],[280,18,275,20,"map"],[280,21,275,23],[280,22,275,24,"size"],[280,26,275,28],[280,31,275,33],[280,32,275,34],[281,4,276,4],[282,4,278,4],[283,0,279,0],[284,0,280,0],[285,0,281,0],[286,0,282,0],[287,4,283,4],[287,8,283,8,"numRestrictions"],[287,23,283,23,"numRestrictions"],[287,24,283,23],[287,26,283,26],[288,6,284,8],[288,13,284,15],[288,17,284,19],[288,18,284,20,"map"],[288,21,284,23],[288,22,284,24,"size"],[288,26,284,28],[289,4,285,4],[290,2,286,0],[291,0,286,1],[291,3]],"functionMap":{"names":["<global>","PurposeRestrictionVector","has","isOkToHave","add","restrictPurposeToLegalBasis","<anonymous>","map$argument_0","getVendors","map.forEach$argument_0","bst.get.forEach$argument_0","getRestrictionType","getRestrictions.forEach$argument_0","vendorHasRestriction","getMaxVendorId","getRestrictions","getPurposes","remove","set__gvl","vendors.forEach$argument_0","get__gvl","isEmpty","get__numRestrictions"],"mappings":"AAA;OCI;ICc;KDE;IEC;KFkD;IGQ;KHc;IIO;2BCG;SDK;wDEI,YF;KJa;IOW;6BCU;kCCC;iBDE;aDC;KPI;IUC;+CCE;SDM;KVE;IYU;KZO;IaO;yBLE;SKE;KbE;IcC;yBNE;SMS;KdE;IeC;yBPE;SOE;KfE;IgBQ;KhBW;IiBO;6BTO;gCUG;iBVI;aSC;KjBE;ImBM;KnBE;IoBM;KpBE;IqBO;KrBE;CDC"},"hasCjsExports":false},"type":"js/module"}]}